version: "2.1"

executors:
  cross-builder:
    docker:
      # NOTE: To upgrade the Go version, first push the upgrade to the cross-builder Dockerfile in the edge repo,
      # then update the version here to match. Until we finish the migration to using the cross-builder image,
      # you'll also need to update references to `cimg/go` and `GO_VERSION` in this file.
      - image: quay.io/influxdb/cross-builder:go1.19.4-cb1343dd74ecba8ec07fe810195530a0b9055aa9
    resource_class: medium
  linux-amd64:
    machine:
      image: ubuntu-2004:202107-02
  linux-arm64:
    machine:
      image: ubuntu-2004:202104-01
      resource_class: arm.medium
  mac:
    macos:
      xcode: 12.5.1
      resource_class: medium
    shell: /bin/bash -eo pipefail
  windows:
    machine:
      image: windows-server-2019-vs2019:stable
      resource_class: windows.medium
    shell: bash.exe -eo pipefail

workflows:
  version: 2
  build-and-test:
    jobs:
      - lint
      - check-openapi
      - build-all
      - test-race:
          name: test-linux-amd64
      - test-build:
          matrix:
            parameters:
              os: [ linux, darwin, windows ]
              arch: [ amd64, arm64 ]
            exclude:
              - os: darwin
                arch: arm64
              - os: windows
                arch: arm64
              # linux/amd64 can be tested directly from our cross-builder image
              # to save time & enable running with the race detector.
              - os: linux
                arch: amd64
      - test-prebuilt:
          name: test-linux-arm64
          executor: linux-arm64
          os: linux
          arch: arm64
          requires:
            - test-build-arm64-linux
      - test-prebuilt:
          name: test-mac
          executor: mac
          os: darwin
          arch: amd64
          requires:
            - test-build-amd64-darwin
      - test-prebuilt:
          name: test-windows
          executor: windows
          os: windows
          arch: amd64
          requires:
            - test-build-amd64-windows
  release-nightly:
    triggers:
      - schedule:
          cron: "0 5 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - changelog
      - lint
      - check-openapi
      - test-race:
          name: test-linux-amd64
      - test-build:
          matrix:
            parameters:
              os: [ linux, darwin, windows ]
              arch: [ amd64, arm64 ]
            exclude:
              - os: darwin
                arch: arm64
              - os: windows
                arch: arm64
              # linux/amd64 can be tested directly from our cross-builder image
              # to save time & enable running with the race detector.
              - os: linux
                arch: amd64
      - test-prebuilt:
          name: test-linux-arm64
          executor: linux-arm64
          os: linux
          arch: arm64
          requires:
            - test-build-arm64-linux
      - test-prebuilt:
          name: test-mac
          executor: mac
          os: darwin
          arch: amd64
          requires:
            - test-build-amd64-darwin
      - test-prebuilt:
          name: test-windows
          executor: windows
          os: windows
          arch: amd64
          requires:
            - test-build-amd64-windows
      - release:
          is-nightly: true
          requires:
            - changelog
            - lint
            - check-openapi
            - test-linux-amd64
            - test-linux-arm64
            - test-mac
            - test-windows
  release-tag:
    jobs:
      - changelog:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-(rc|alpha|beta)[0-9]+)?$/
      - lint:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-(rc|alpha|beta)[0-9]+)?$/
      - check-openapi:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-(rc|alpha|beta)[0-9]+)?$/
      - test-race:
          name: test-linux-amd64
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-(rc|alpha|beta)[0-9]+)?$/
      - test-build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-(rc|alpha|beta)[0-9]+)?$/
          matrix:
            parameters:
              os: [ linux, darwin, windows ]
              arch: [ amd64, arm64 ]
            exclude:
              - os: darwin
                arch: arm64
              - os: windows
                arch: arm64
              # linux/amd64 can be tested directly from our cross-builder image
              # to save time & enable running with the race detector.
              - os: linux
                arch: amd64
      - test-prebuilt:
          name: test-linux-arm64
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-(rc|alpha|beta)[0-9]+)?$/
          executor: linux-arm64
          os: linux
          arch: arm64
          requires:
            - test-build-arm64-linux
      - test-prebuilt:
          name: test-mac
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-(rc|alpha|beta)[0-9]+)?$/
          executor: mac
          os: darwin
          arch: amd64
          requires:
            - test-build-amd64-darwin
      - test-prebuilt:
          name: test-windows
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-(rc|alpha|beta)[0-9]+)?$/
          executor: windows
          os: windows
          arch: amd64
          requires:
            - test-build-amd64-windows
      - release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+(-(rc|alpha|beta)[0-9]+)?$/
          is-nightly: false
          requires:
            - changelog
            - lint
            - check-openapi
            - test-linux-amd64
            - test-linux-arm64
            - test-mac
            - test-windows

commands:
  setup:
    steps:
      - run:
          name: Install system dependencies
          command: ./scripts/ci/setup-system.sh
      - run:
          name: Install Go
          command: |
            ./scripts/ci/install-go.sh ${HOME}/.tools
            echo 'export PATH=${HOME}/.tools/go/bin:${PATH}' >> $BASH_ENV
      - run:
          name: Set GOPATH and GOCACHE
          command: |
            GOPATH=${HOME}/go
            echo "export GOPATH=${GOPATH}" >> $BASH_ENV
            mkdir -p ${GOPATH}/bin
            echo 'export PATH=${GOPATH}/bin:${PATH}' >> $BASH_ENV
            mkdir -p ${HOME}/.cache
            echo 'export GOCACHE=${HOME}/.cache' >> $BASH_ENV
  install-goreleaser:
    steps:
      - run:
          name: Install goreleaser
          command: ./scripts/ci/download-goreleaser.sh v1.14.0

jobs:
  lint:
    executor: cross-builder
    steps:
      - checkout
      - run:
          name: vet
          command: make vet
          when: always
      - run:
          name: Check formatting
          command: make checkfmt
          when: always
      - run:
          name: Check mod tidy
          command: make checktidy
          when: always
      - run:
          name: staticcheck
          command: make staticcheck
          when: always
      - run:
          name: Check generate
          command: make checkgenerate
          when: always

  check-openapi:
    executor: linux-amd64
    steps:
      - checkout
      - setup
      - run:
          name: Init openapi submodule
          command: git submodule update --init --recursive
      - run: make checkopenapi

  build-all:
    executor: linux-amd64
    steps:
      - checkout
      - setup
      - install-goreleaser
      - run:
          name: Make a pseudo-tag for the snapshot build
          command: |
            latest_tag=$(git describe --tags --abbrev=0)
            git tag ${latest_tag}+SNAPSHOT.$(git rev-parse --short HEAD)
      - run:
          name: Cross-build all targets
          command: IS_SNAPSHOT=1 goreleaser release --rm-dist --skip-publish --skip-sign --skip-validate
      - store_artifacts:
          path: dist

  release:
    parameters:
      is-nightly:
        type: boolean
    executor: linux-amd64
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup
      - run:
          name: Import GPG key
          command: |
            echo -e "$GPG_PRIVATE_KEY" > private.key
            gpg --batch --import private.key
      - install-goreleaser
      - when:
          condition: << parameters.is-nightly >>
          steps:
            - run:
                name: Make a pseudo-tag for the nightly build
                command: |
                  latest_tag=$(git describe --tags --abbrev=0)
                  git tag ${latest_tag}+nightly.$(date +%Y.%m.%d)
            - run:
                name: Publish nightly snapshot release
                command: IS_NIGHTLY=1 goreleaser release --rm-dist
      - unless:
          condition: << parameters.is-nightly >>
          steps:
            - run:
                name: Publish tagged release
                command: goreleaser release --rm-dist
            - run:
                command: |
                  export DEBIAN_FRONTEND=noninteractive
                  sudo apt-get update
                  sudo apt-get install awscli
                  .circleci/scripts/upload-latest-artifacts
      - store_artifacts:
          path: dist

  test-build:
    executor: cross-builder
    parameters:
      os:
        type: string
      arch:
        type: string
    steps:
      - checkout
      - run:
          name: Build test binaries
          command: |
            export GOOS=<< parameters.os >>
            export GOARCH=<< parameters.arch >>
            ./scripts/ci/build-tests.sh ./test-bin-"$GOOS"-"$GOARCH"
      - persist_to_workspace:
          root: .
          paths:
            - ./test-bin*

  test-prebuilt:
    parameters:
      executor:
        type: executor
      os:
        type: string
      arch:
        type: string
    executor: << parameters.executor >>
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run tests
          command: ./scripts/ci/run-prebuilt-tests.sh $(pwd)/test-bin-<< parameters.os >>-<< parameters.arch >> $(pwd)/test-results
      - store_artifacts:
          path: ./test-results
          destination: raw-test-output
      - store_test_results:
          path: ./test-results

  test-race:
    executor: cross-builder
    steps:
      - checkout
      - run:
          name: Run race tests
          command: ./scripts/ci/run-race-tests.sh $(pwd)/test-results
      - store_artifacts:
          path: ./test-results
          destination: raw-test-output
      - store_test_results:
          path: ./test-results

  changelog:
    docker:
      - image: quay.io/influxdb/changelogger:a20523cf8594eb93920e74d0189d6602a76a6146
    steps:
      - checkout
      - run:
          name: Generate changelog
          command: |
            CHANGELOG_FILE_NAME="CHANGELOG-CLI"
            if [ -n "<< pipeline.git.tag >>" ]; then
              CHANGELOG_FILE_NAME="CHANGELOG-CLI-<< pipeline.git.tag >>"
            fi

            mkdir changelog_artifacts

            echo -e "CHANGELOG for influx-cli commit ${CIRCLE_SHA1}\n" > changelog_artifacts/"$CHANGELOG_FILE_NAME".md
            echo "In addition to the list of changes below, please also see the [official release notes](https://docs.influxdata.com/influxdb/latest/reference/release-notes/influx-cli/) for other important information about this release." >> changelog_artifacts/"$CHANGELOG_FILE_NAME".md
            build-changelog-by-tags.sh HEAD v2.2.1 main >> changelog_artifacts/"$CHANGELOG_FILE_NAME".md
            cat ./scripts/ci/CHANGELOG_frozen.md >> changelog_artifacts/"$CHANGELOG_FILE_NAME".md
      - store_artifacts:
          path: changelog_artifacts/
      - persist_to_workspace:
          root: .
          paths:
            - changelog_artifacts
