/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Dashboards struct for Dashboards
type Dashboards struct {
	Links      *Links       `json:"links,omitempty" yaml:"links,omitempty"`
	Dashboards *[]Dashboard `json:"dashboards,omitempty" yaml:"dashboards,omitempty"`
}

// NewDashboards instantiates a new Dashboards object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboards() *Dashboards {
	this := Dashboards{}
	return &this
}

// NewDashboardsWithDefaults instantiates a new Dashboards object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardsWithDefaults() *Dashboards {
	this := Dashboards{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Dashboards) GetLinks() Links {
	if o == nil || o.Links == nil {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboards) GetLinksOk() (*Links, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Dashboards) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *Dashboards) SetLinks(v Links) {
	o.Links = &v
}

// GetDashboards returns the Dashboards field value if set, zero value otherwise.
func (o *Dashboards) GetDashboards() []Dashboard {
	if o == nil || o.Dashboards == nil {
		var ret []Dashboard
		return ret
	}
	return *o.Dashboards
}

// GetDashboardsOk returns a tuple with the Dashboards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboards) GetDashboardsOk() (*[]Dashboard, bool) {
	if o == nil || o.Dashboards == nil {
		return nil, false
	}
	return o.Dashboards, true
}

// HasDashboards returns a boolean if a field has been set.
func (o *Dashboards) HasDashboards() bool {
	if o != nil && o.Dashboards != nil {
		return true
	}

	return false
}

// SetDashboards gets a reference to the given []Dashboard and assigns it to the Dashboards field.
func (o *Dashboards) SetDashboards(v []Dashboard) {
	o.Dashboards = &v
}

func (o Dashboards) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Dashboards != nil {
		toSerialize["dashboards"] = o.Dashboards
	}
	return json.Marshal(toSerialize)
}

type NullableDashboards struct {
	value *Dashboards
	isSet bool
}

func (v NullableDashboards) Get() *Dashboards {
	return v.value
}

func (v *NullableDashboards) Set(val *Dashboards) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboards) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboards) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboards(val *Dashboards) *NullableDashboards {
	return &NullableDashboards{value: val, isSet: true}
}

func (v NullableDashboards) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboards) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
