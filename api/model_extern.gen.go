/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Extern Free-form Flux AST to prepend to query requests
type Extern struct {
	Type                 *string `json:"type,omitempty" yaml:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Extern Extern

// NewExtern instantiates a new Extern object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtern() *Extern {
	this := Extern{}
	var type_ string = "File"
	this.Type = &type_
	return &this
}

// NewExternWithDefaults instantiates a new Extern object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternWithDefaults() *Extern {
	this := Extern{}
	var type_ string = "File"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Extern) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extern) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Extern) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Extern) SetType(v string) {
	o.Type = &v
}

func (o Extern) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Extern) UnmarshalJSON(bytes []byte) (err error) {
	varExtern := _Extern{}

	if err = json.Unmarshal(bytes, &varExtern); err == nil {
		*o = Extern(varExtern)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtern struct {
	value *Extern
	isSet bool
}

func (v NullableExtern) Get() *Extern {
	return v.value
}

func (v *NullableExtern) Set(val *Extern) {
	v.value = val
	v.isSet = true
}

func (v NullableExtern) IsSet() bool {
	return v.isSet
}

func (v *NullableExtern) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtern(val *Extern) *NullableExtern {
	return &NullableExtern{value: val, isSet: true}
}

func (v NullableExtern) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtern) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
