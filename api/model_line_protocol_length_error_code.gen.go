/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// LineProtocolLengthErrorCode Code is the machine-readable error code.
type LineProtocolLengthErrorCode string

// List of LineProtocolLengthErrorCode
const (
	LINEPROTOCOLLENGTHERRORCODE_INVALID LineProtocolLengthErrorCode = "invalid"
)

func (v *LineProtocolLengthErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LineProtocolLengthErrorCode(value)
	for _, existing := range []LineProtocolLengthErrorCode{"invalid"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LineProtocolLengthErrorCode", value)
}

// Ptr returns reference to LineProtocolLengthErrorCode value
func (v LineProtocolLengthErrorCode) Ptr() *LineProtocolLengthErrorCode {
	return &v
}

type NullableLineProtocolLengthErrorCode struct {
	value *LineProtocolLengthErrorCode
	isSet bool
}

func (v NullableLineProtocolLengthErrorCode) Get() *LineProtocolLengthErrorCode {
	return v.value
}

func (v *NullableLineProtocolLengthErrorCode) Set(val *LineProtocolLengthErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableLineProtocolLengthErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableLineProtocolLengthErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineProtocolLengthErrorCode(val *LineProtocolLengthErrorCode) *NullableLineProtocolLengthErrorCode {
	return &NullableLineProtocolLengthErrorCode{value: val, isSet: true}
}

func (v NullableLineProtocolLengthErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineProtocolLengthErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
