/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PatchRetentionRule struct for PatchRetentionRule
type PatchRetentionRule struct {
	Type *string `json:"type,omitempty" yaml:"type,omitempty"`
	// The number of seconds to keep data. Default duration is `2592000` (30 days). `0` represents infinite retention.
	EverySeconds int64 `json:"everySeconds" yaml:"everySeconds"`
	// The [shard group duration]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#shard). The number of seconds that each shard group covers.  #### InfluxDB Cloud  - Doesn't use `shardGroupDurationsSeconds`.  #### InfluxDB OSS  - Default value depends on the [bucket retention period]({{% INFLUXDB_DOCS_URL %}}/reference/internals/shards/#shard-group-duration).  #### Related guides  - InfluxDB [shards and shard groups]({{% INFLUXDB_DOCS_URL %}}/reference/internals/shards/)
	ShardGroupDurationSeconds *int64 `json:"shardGroupDurationSeconds,omitempty" yaml:"shardGroupDurationSeconds,omitempty"`
}

// NewPatchRetentionRule instantiates a new PatchRetentionRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchRetentionRule(everySeconds int64) *PatchRetentionRule {
	this := PatchRetentionRule{}
	var type_ string = "expire"
	this.Type = &type_
	this.EverySeconds = everySeconds
	return &this
}

// NewPatchRetentionRuleWithDefaults instantiates a new PatchRetentionRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchRetentionRuleWithDefaults() *PatchRetentionRule {
	this := PatchRetentionRule{}
	var type_ string = "expire"
	this.Type = &type_
	var everySeconds int64 = 2592000
	this.EverySeconds = everySeconds
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PatchRetentionRule) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchRetentionRule) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PatchRetentionRule) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PatchRetentionRule) SetType(v string) {
	o.Type = &v
}

// GetEverySeconds returns the EverySeconds field value
func (o *PatchRetentionRule) GetEverySeconds() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EverySeconds
}

// GetEverySecondsOk returns a tuple with the EverySeconds field value
// and a boolean to check if the value has been set.
func (o *PatchRetentionRule) GetEverySecondsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EverySeconds, true
}

// SetEverySeconds sets field value
func (o *PatchRetentionRule) SetEverySeconds(v int64) {
	o.EverySeconds = v
}

// GetShardGroupDurationSeconds returns the ShardGroupDurationSeconds field value if set, zero value otherwise.
func (o *PatchRetentionRule) GetShardGroupDurationSeconds() int64 {
	if o == nil || o.ShardGroupDurationSeconds == nil {
		var ret int64
		return ret
	}
	return *o.ShardGroupDurationSeconds
}

// GetShardGroupDurationSecondsOk returns a tuple with the ShardGroupDurationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchRetentionRule) GetShardGroupDurationSecondsOk() (*int64, bool) {
	if o == nil || o.ShardGroupDurationSeconds == nil {
		return nil, false
	}
	return o.ShardGroupDurationSeconds, true
}

// HasShardGroupDurationSeconds returns a boolean if a field has been set.
func (o *PatchRetentionRule) HasShardGroupDurationSeconds() bool {
	if o != nil && o.ShardGroupDurationSeconds != nil {
		return true
	}

	return false
}

// SetShardGroupDurationSeconds gets a reference to the given int64 and assigns it to the ShardGroupDurationSeconds field.
func (o *PatchRetentionRule) SetShardGroupDurationSeconds(v int64) {
	o.ShardGroupDurationSeconds = &v
}

func (o PatchRetentionRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["everySeconds"] = o.EverySeconds
	}
	if o.ShardGroupDurationSeconds != nil {
		toSerialize["shardGroupDurationSeconds"] = o.ShardGroupDurationSeconds
	}
	return json.Marshal(toSerialize)
}

type NullablePatchRetentionRule struct {
	value *PatchRetentionRule
	isSet bool
}

func (v NullablePatchRetentionRule) Get() *PatchRetentionRule {
	return v.value
}

func (v *NullablePatchRetentionRule) Set(val *PatchRetentionRule) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchRetentionRule) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchRetentionRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchRetentionRule(val *PatchRetentionRule) *NullablePatchRetentionRule {
	return &NullablePatchRetentionRule{value: val, isSet: true}
}

func (v NullablePatchRetentionRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchRetentionRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
