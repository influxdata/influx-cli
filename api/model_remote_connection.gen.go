/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// RemoteConnection struct for RemoteConnection
type RemoteConnection struct {
	Id               string  `json:"id" yaml:"id"`
	Name             string  `json:"name" yaml:"name"`
	OrgID            string  `json:"orgID" yaml:"orgID"`
	Description      *string `json:"description,omitempty" yaml:"description,omitempty"`
	RemoteURL        string  `json:"remoteURL" yaml:"remoteURL"`
	RemoteOrgID      string  `json:"remoteOrgID" yaml:"remoteOrgID"`
	AllowInsecureTLS bool    `json:"allowInsecureTLS" yaml:"allowInsecureTLS"`
}

// NewRemoteConnection instantiates a new RemoteConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteConnection(id string, name string, orgID string, remoteURL string, remoteOrgID string, allowInsecureTLS bool) *RemoteConnection {
	this := RemoteConnection{}
	this.Id = id
	this.Name = name
	this.OrgID = orgID
	this.RemoteURL = remoteURL
	this.RemoteOrgID = remoteOrgID
	this.AllowInsecureTLS = allowInsecureTLS
	return &this
}

// NewRemoteConnectionWithDefaults instantiates a new RemoteConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteConnectionWithDefaults() *RemoteConnection {
	this := RemoteConnection{}
	var allowInsecureTLS bool = false
	this.AllowInsecureTLS = allowInsecureTLS
	return &this
}

// GetId returns the Id field value
func (o *RemoteConnection) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RemoteConnection) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RemoteConnection) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *RemoteConnection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RemoteConnection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RemoteConnection) SetName(v string) {
	o.Name = v
}

// GetOrgID returns the OrgID field value
func (o *RemoteConnection) GetOrgID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgID
}

// GetOrgIDOk returns a tuple with the OrgID field value
// and a boolean to check if the value has been set.
func (o *RemoteConnection) GetOrgIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgID, true
}

// SetOrgID sets field value
func (o *RemoteConnection) SetOrgID(v string) {
	o.OrgID = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RemoteConnection) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteConnection) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RemoteConnection) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RemoteConnection) SetDescription(v string) {
	o.Description = &v
}

// GetRemoteURL returns the RemoteURL field value
func (o *RemoteConnection) GetRemoteURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteURL
}

// GetRemoteURLOk returns a tuple with the RemoteURL field value
// and a boolean to check if the value has been set.
func (o *RemoteConnection) GetRemoteURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteURL, true
}

// SetRemoteURL sets field value
func (o *RemoteConnection) SetRemoteURL(v string) {
	o.RemoteURL = v
}

// GetRemoteOrgID returns the RemoteOrgID field value
func (o *RemoteConnection) GetRemoteOrgID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteOrgID
}

// GetRemoteOrgIDOk returns a tuple with the RemoteOrgID field value
// and a boolean to check if the value has been set.
func (o *RemoteConnection) GetRemoteOrgIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteOrgID, true
}

// SetRemoteOrgID sets field value
func (o *RemoteConnection) SetRemoteOrgID(v string) {
	o.RemoteOrgID = v
}

// GetAllowInsecureTLS returns the AllowInsecureTLS field value
func (o *RemoteConnection) GetAllowInsecureTLS() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowInsecureTLS
}

// GetAllowInsecureTLSOk returns a tuple with the AllowInsecureTLS field value
// and a boolean to check if the value has been set.
func (o *RemoteConnection) GetAllowInsecureTLSOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowInsecureTLS, true
}

// SetAllowInsecureTLS sets field value
func (o *RemoteConnection) SetAllowInsecureTLS(v bool) {
	o.AllowInsecureTLS = v
}

func (o RemoteConnection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["orgID"] = o.OrgID
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["remoteURL"] = o.RemoteURL
	}
	if true {
		toSerialize["remoteOrgID"] = o.RemoteOrgID
	}
	if true {
		toSerialize["allowInsecureTLS"] = o.AllowInsecureTLS
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteConnection struct {
	value *RemoteConnection
	isSet bool
}

func (v NullableRemoteConnection) Get() *RemoteConnection {
	return v.value
}

func (v *NullableRemoteConnection) Set(val *RemoteConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteConnection(val *RemoteConnection) *NullableRemoteConnection {
	return &NullableRemoteConnection{value: val, isSet: true}
}

func (v NullableRemoteConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
