/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Replications struct for Replications
type Replications struct {
	Replications *[]Replication `json:"replications,omitempty" yaml:"replications,omitempty"`
}

// NewReplications instantiates a new Replications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplications() *Replications {
	this := Replications{}
	return &this
}

// NewReplicationsWithDefaults instantiates a new Replications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationsWithDefaults() *Replications {
	this := Replications{}
	return &this
}

// GetReplications returns the Replications field value if set, zero value otherwise.
func (o *Replications) GetReplications() []Replication {
	if o == nil || o.Replications == nil {
		var ret []Replication
		return ret
	}
	return *o.Replications
}

// GetReplicationsOk returns a tuple with the Replications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replications) GetReplicationsOk() (*[]Replication, bool) {
	if o == nil || o.Replications == nil {
		return nil, false
	}
	return o.Replications, true
}

// HasReplications returns a boolean if a field has been set.
func (o *Replications) HasReplications() bool {
	if o != nil && o.Replications != nil {
		return true
	}

	return false
}

// SetReplications gets a reference to the given []Replication and assigns it to the Replications field.
func (o *Replications) SetReplications(v []Replication) {
	o.Replications = &v
}

func (o Replications) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Replications != nil {
		toSerialize["replications"] = o.Replications
	}
	return json.Marshal(toSerialize)
}

type NullableReplications struct {
	value *Replications
	isSet bool
}

func (v NullableReplications) Get() *Replications {
	return v.value
}

func (v *NullableReplications) Set(val *Replications) {
	v.value = val
	v.isSet = true
}

func (v NullableReplications) IsSet() bool {
	return v.isSet
}

func (v *NullableReplications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplications(val *Replications) *NullableReplications {
	return &NullableReplications{value: val, isSet: true}
}

func (v NullableReplications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
