/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// RunLinks struct for RunLinks
type RunLinks struct {
	Self  *string `json:"self,omitempty"`
	Task  *string `json:"task,omitempty"`
	Retry *string `json:"retry,omitempty"`
}

// NewRunLinks instantiates a new RunLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunLinks() *RunLinks {
	this := RunLinks{}
	return &this
}

// NewRunLinksWithDefaults instantiates a new RunLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunLinksWithDefaults() *RunLinks {
	this := RunLinks{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *RunLinks) GetSelf() string {
	if o == nil || o.Self == nil {
		var ret string
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunLinks) GetSelfOk() (*string, bool) {
	if o == nil || o.Self == nil {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *RunLinks) HasSelf() bool {
	if o != nil && o.Self != nil {
		return true
	}

	return false
}

// SetSelf gets a reference to the given string and assigns it to the Self field.
func (o *RunLinks) SetSelf(v string) {
	o.Self = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *RunLinks) GetTask() string {
	if o == nil || o.Task == nil {
		var ret string
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunLinks) GetTaskOk() (*string, bool) {
	if o == nil || o.Task == nil {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *RunLinks) HasTask() bool {
	if o != nil && o.Task != nil {
		return true
	}

	return false
}

// SetTask gets a reference to the given string and assigns it to the Task field.
func (o *RunLinks) SetTask(v string) {
	o.Task = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *RunLinks) GetRetry() string {
	if o == nil || o.Retry == nil {
		var ret string
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunLinks) GetRetryOk() (*string, bool) {
	if o == nil || o.Retry == nil {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *RunLinks) HasRetry() bool {
	if o != nil && o.Retry != nil {
		return true
	}

	return false
}

// SetRetry gets a reference to the given string and assigns it to the Retry field.
func (o *RunLinks) SetRetry(v string) {
	o.Retry = &v
}

func (o RunLinks) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Self != nil {
		toSerialize["self"] = o.Self
	}
	if o.Task != nil {
		toSerialize["task"] = o.Task
	}
	if o.Retry != nil {
		toSerialize["retry"] = o.Retry
	}
	return json.Marshal(toSerialize)
}

type NullableRunLinks struct {
	value *RunLinks
	isSet bool
}

func (v NullableRunLinks) Get() *RunLinks {
	return v.value
}

func (v *NullableRunLinks) Set(val *RunLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableRunLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableRunLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunLinks(val *RunLinks) *NullableRunLinks {
	return &NullableRunLinks{value: val, isSet: true}
}

func (v NullableRunLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
