/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Scripts struct for Scripts
type Scripts struct {
	Scripts *[]Script `json:"scripts,omitempty" yaml:"scripts,omitempty"`
}

// NewScripts instantiates a new Scripts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScripts() *Scripts {
	this := Scripts{}
	return &this
}

// NewScriptsWithDefaults instantiates a new Scripts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptsWithDefaults() *Scripts {
	this := Scripts{}
	return &this
}

// GetScripts returns the Scripts field value if set, zero value otherwise.
func (o *Scripts) GetScripts() []Script {
	if o == nil || o.Scripts == nil {
		var ret []Script
		return ret
	}
	return *o.Scripts
}

// GetScriptsOk returns a tuple with the Scripts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scripts) GetScriptsOk() (*[]Script, bool) {
	if o == nil || o.Scripts == nil {
		return nil, false
	}
	return o.Scripts, true
}

// HasScripts returns a boolean if a field has been set.
func (o *Scripts) HasScripts() bool {
	if o != nil && o.Scripts != nil {
		return true
	}

	return false
}

// SetScripts gets a reference to the given []Script and assigns it to the Scripts field.
func (o *Scripts) SetScripts(v []Script) {
	o.Scripts = &v
}

func (o Scripts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Scripts != nil {
		toSerialize["scripts"] = o.Scripts
	}
	return json.Marshal(toSerialize)
}

type NullableScripts struct {
	value *Scripts
	isSet bool
}

func (v NullableScripts) Get() *Scripts {
	return v.value
}

func (v *NullableScripts) Set(val *Scripts) {
	v.value = val
	v.isSet = true
}

func (v NullableScripts) IsSet() bool {
	return v.isSet
}

func (v *NullableScripts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScripts(val *Scripts) *NullableScripts {
	return &NullableScripts{value: val, isSet: true}
}

func (v NullableScripts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScripts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
