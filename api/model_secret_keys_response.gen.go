/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SecretKeysResponse struct for SecretKeysResponse
type SecretKeysResponse struct {
	Secrets *[]string                     `json:"secrets,omitempty" yaml:"secrets,omitempty"`
	Links   *SecretKeysResponseAllOfLinks `json:"links,omitempty" yaml:"links,omitempty"`
}

// NewSecretKeysResponse instantiates a new SecretKeysResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretKeysResponse() *SecretKeysResponse {
	this := SecretKeysResponse{}
	return &this
}

// NewSecretKeysResponseWithDefaults instantiates a new SecretKeysResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretKeysResponseWithDefaults() *SecretKeysResponse {
	this := SecretKeysResponse{}
	return &this
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *SecretKeysResponse) GetSecrets() []string {
	if o == nil || o.Secrets == nil {
		var ret []string
		return ret
	}
	return *o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretKeysResponse) GetSecretsOk() (*[]string, bool) {
	if o == nil || o.Secrets == nil {
		return nil, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *SecretKeysResponse) HasSecrets() bool {
	if o != nil && o.Secrets != nil {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given []string and assigns it to the Secrets field.
func (o *SecretKeysResponse) SetSecrets(v []string) {
	o.Secrets = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *SecretKeysResponse) GetLinks() SecretKeysResponseAllOfLinks {
	if o == nil || o.Links == nil {
		var ret SecretKeysResponseAllOfLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretKeysResponse) GetLinksOk() (*SecretKeysResponseAllOfLinks, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *SecretKeysResponse) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given SecretKeysResponseAllOfLinks and assigns it to the Links field.
func (o *SecretKeysResponse) SetLinks(v SecretKeysResponseAllOfLinks) {
	o.Links = &v
}

func (o SecretKeysResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Secrets != nil {
		toSerialize["secrets"] = o.Secrets
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableSecretKeysResponse struct {
	value *SecretKeysResponse
	isSet bool
}

func (v NullableSecretKeysResponse) Get() *SecretKeysResponse {
	return v.value
}

func (v *NullableSecretKeysResponse) Set(val *SecretKeysResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretKeysResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretKeysResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretKeysResponse(val *SecretKeysResponse) *NullableSecretKeysResponse {
	return &NullableSecretKeysResponse{value: val, isSet: true}
}

func (v NullableSecretKeysResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretKeysResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
