/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// TaskUpdateRequest struct for TaskUpdateRequest
type TaskUpdateRequest struct {
	Status *TaskStatusType `json:"status,omitempty"`
	// The Flux script to run for this task.
	Flux *string `json:"flux,omitempty"`
	// Override the 'name' option in the flux script.
	Name *string `json:"name,omitempty"`
	// Override the 'every' option in the flux script.
	Every *string `json:"every,omitempty"`
	// Override the 'cron' option in the flux script.
	Cron *string `json:"cron,omitempty"`
	// Override the 'offset' option in the flux script.
	Offset *string `json:"offset,omitempty"`
	// An optional description of the task.
	Description *string `json:"description,omitempty"`
}

// NewTaskUpdateRequest instantiates a new TaskUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskUpdateRequest() *TaskUpdateRequest {
	this := TaskUpdateRequest{}
	return &this
}

// NewTaskUpdateRequestWithDefaults instantiates a new TaskUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskUpdateRequestWithDefaults() *TaskUpdateRequest {
	this := TaskUpdateRequest{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TaskUpdateRequest) GetStatus() TaskStatusType {
	if o == nil || o.Status == nil {
		var ret TaskStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateRequest) GetStatusOk() (*TaskStatusType, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TaskUpdateRequest) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TaskStatusType and assigns it to the Status field.
func (o *TaskUpdateRequest) SetStatus(v TaskStatusType) {
	o.Status = &v
}

// GetFlux returns the Flux field value if set, zero value otherwise.
func (o *TaskUpdateRequest) GetFlux() string {
	if o == nil || o.Flux == nil {
		var ret string
		return ret
	}
	return *o.Flux
}

// GetFluxOk returns a tuple with the Flux field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateRequest) GetFluxOk() (*string, bool) {
	if o == nil || o.Flux == nil {
		return nil, false
	}
	return o.Flux, true
}

// HasFlux returns a boolean if a field has been set.
func (o *TaskUpdateRequest) HasFlux() bool {
	if o != nil && o.Flux != nil {
		return true
	}

	return false
}

// SetFlux gets a reference to the given string and assigns it to the Flux field.
func (o *TaskUpdateRequest) SetFlux(v string) {
	o.Flux = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaskUpdateRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaskUpdateRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaskUpdateRequest) SetName(v string) {
	o.Name = &v
}

// GetEvery returns the Every field value if set, zero value otherwise.
func (o *TaskUpdateRequest) GetEvery() string {
	if o == nil || o.Every == nil {
		var ret string
		return ret
	}
	return *o.Every
}

// GetEveryOk returns a tuple with the Every field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateRequest) GetEveryOk() (*string, bool) {
	if o == nil || o.Every == nil {
		return nil, false
	}
	return o.Every, true
}

// HasEvery returns a boolean if a field has been set.
func (o *TaskUpdateRequest) HasEvery() bool {
	if o != nil && o.Every != nil {
		return true
	}

	return false
}

// SetEvery gets a reference to the given string and assigns it to the Every field.
func (o *TaskUpdateRequest) SetEvery(v string) {
	o.Every = &v
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *TaskUpdateRequest) GetCron() string {
	if o == nil || o.Cron == nil {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateRequest) GetCronOk() (*string, bool) {
	if o == nil || o.Cron == nil {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *TaskUpdateRequest) HasCron() bool {
	if o != nil && o.Cron != nil {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *TaskUpdateRequest) SetCron(v string) {
	o.Cron = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *TaskUpdateRequest) GetOffset() string {
	if o == nil || o.Offset == nil {
		var ret string
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateRequest) GetOffsetOk() (*string, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *TaskUpdateRequest) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given string and assigns it to the Offset field.
func (o *TaskUpdateRequest) SetOffset(v string) {
	o.Offset = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TaskUpdateRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TaskUpdateRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TaskUpdateRequest) SetDescription(v string) {
	o.Description = &v
}

func (o TaskUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Flux != nil {
		toSerialize["flux"] = o.Flux
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Every != nil {
		toSerialize["every"] = o.Every
	}
	if o.Cron != nil {
		toSerialize["cron"] = o.Cron
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableTaskUpdateRequest struct {
	value *TaskUpdateRequest
	isSet bool
}

func (v NullableTaskUpdateRequest) Get() *TaskUpdateRequest {
	return v.value
}

func (v *NullableTaskUpdateRequest) Set(val *TaskUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskUpdateRequest(val *TaskUpdateRequest) *NullableTaskUpdateRequest {
	return &NullableTaskUpdateRequest{value: val, isSet: true}
}

func (v NullableTaskUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
