/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// TelegrafAllOf struct for TelegrafAllOf
type TelegrafAllOf struct {
	Id     *string             `json:"id,omitempty"`
	Links  *TelegrafAllOfLinks `json:"links,omitempty"`
	Labels *[]Label            `json:"labels,omitempty"`
}

// NewTelegrafAllOf instantiates a new TelegrafAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelegrafAllOf() *TelegrafAllOf {
	this := TelegrafAllOf{}
	return &this
}

// NewTelegrafAllOfWithDefaults instantiates a new TelegrafAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelegrafAllOfWithDefaults() *TelegrafAllOf {
	this := TelegrafAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TelegrafAllOf) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelegrafAllOf) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TelegrafAllOf) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TelegrafAllOf) SetId(v string) {
	o.Id = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *TelegrafAllOf) GetLinks() TelegrafAllOfLinks {
	if o == nil || o.Links == nil {
		var ret TelegrafAllOfLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelegrafAllOf) GetLinksOk() (*TelegrafAllOfLinks, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TelegrafAllOf) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TelegrafAllOfLinks and assigns it to the Links field.
func (o *TelegrafAllOf) SetLinks(v TelegrafAllOfLinks) {
	o.Links = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *TelegrafAllOf) GetLabels() []Label {
	if o == nil || o.Labels == nil {
		var ret []Label
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelegrafAllOf) GetLabelsOk() (*[]Label, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *TelegrafAllOf) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []Label and assigns it to the Labels field.
func (o *TelegrafAllOf) SetLabels(v []Label) {
	o.Labels = &v
}

func (o TelegrafAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return json.Marshal(toSerialize)
}

type NullableTelegrafAllOf struct {
	value *TelegrafAllOf
	isSet bool
}

func (v NullableTelegrafAllOf) Get() *TelegrafAllOf {
	return v.value
}

func (v *NullableTelegrafAllOf) Set(val *TelegrafAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTelegrafAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTelegrafAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelegrafAllOf(val *TelegrafAllOf) *NullableTelegrafAllOf {
	return &NullableTelegrafAllOf{value: val, isSet: true}
}

func (v NullableTelegrafAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelegrafAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
