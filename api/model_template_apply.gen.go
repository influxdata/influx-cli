/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// TemplateApply struct for TemplateApply
type TemplateApply struct {
	DryRun    bool                               `json:"dryRun" yaml:"dryRun"`
	OrgID     string                             `json:"orgID" yaml:"orgID"`
	StackID   *string                            `json:"stackID,omitempty" yaml:"stackID,omitempty"`
	Template  *TemplateApplyTemplate             `json:"template,omitempty" yaml:"template,omitempty"`
	Templates []TemplateApplyTemplate            `json:"templates" yaml:"templates"`
	EnvRefs   *map[string]map[string]interface{} `json:"envRefs,omitempty" yaml:"envRefs,omitempty"`
	Secrets   *map[string]string                 `json:"secrets,omitempty" yaml:"secrets,omitempty"`
	Remotes   []TemplateApplyRemoteRef           `json:"remotes" yaml:"remotes"`
	Actions   []TemplateApplyAction              `json:"actions" yaml:"actions"`
}

// NewTemplateApply instantiates a new TemplateApply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateApply(dryRun bool, orgID string, templates []TemplateApplyTemplate, remotes []TemplateApplyRemoteRef, actions []TemplateApplyAction) *TemplateApply {
	this := TemplateApply{}
	this.DryRun = dryRun
	this.OrgID = orgID
	this.Templates = templates
	this.Remotes = remotes
	this.Actions = actions
	return &this
}

// NewTemplateApplyWithDefaults instantiates a new TemplateApply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateApplyWithDefaults() *TemplateApply {
	this := TemplateApply{}
	return &this
}

// GetDryRun returns the DryRun field value
func (o *TemplateApply) GetDryRun() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value
// and a boolean to check if the value has been set.
func (o *TemplateApply) GetDryRunOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DryRun, true
}

// SetDryRun sets field value
func (o *TemplateApply) SetDryRun(v bool) {
	o.DryRun = v
}

// GetOrgID returns the OrgID field value
func (o *TemplateApply) GetOrgID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgID
}

// GetOrgIDOk returns a tuple with the OrgID field value
// and a boolean to check if the value has been set.
func (o *TemplateApply) GetOrgIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgID, true
}

// SetOrgID sets field value
func (o *TemplateApply) SetOrgID(v string) {
	o.OrgID = v
}

// GetStackID returns the StackID field value if set, zero value otherwise.
func (o *TemplateApply) GetStackID() string {
	if o == nil || o.StackID == nil {
		var ret string
		return ret
	}
	return *o.StackID
}

// GetStackIDOk returns a tuple with the StackID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateApply) GetStackIDOk() (*string, bool) {
	if o == nil || o.StackID == nil {
		return nil, false
	}
	return o.StackID, true
}

// HasStackID returns a boolean if a field has been set.
func (o *TemplateApply) HasStackID() bool {
	if o != nil && o.StackID != nil {
		return true
	}

	return false
}

// SetStackID gets a reference to the given string and assigns it to the StackID field.
func (o *TemplateApply) SetStackID(v string) {
	o.StackID = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *TemplateApply) GetTemplate() TemplateApplyTemplate {
	if o == nil || o.Template == nil {
		var ret TemplateApplyTemplate
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateApply) GetTemplateOk() (*TemplateApplyTemplate, bool) {
	if o == nil || o.Template == nil {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *TemplateApply) HasTemplate() bool {
	if o != nil && o.Template != nil {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given TemplateApplyTemplate and assigns it to the Template field.
func (o *TemplateApply) SetTemplate(v TemplateApplyTemplate) {
	o.Template = &v
}

// GetTemplates returns the Templates field value
func (o *TemplateApply) GetTemplates() []TemplateApplyTemplate {
	if o == nil {
		var ret []TemplateApplyTemplate
		return ret
	}

	return o.Templates
}

// GetTemplatesOk returns a tuple with the Templates field value
// and a boolean to check if the value has been set.
func (o *TemplateApply) GetTemplatesOk() (*[]TemplateApplyTemplate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Templates, true
}

// SetTemplates sets field value
func (o *TemplateApply) SetTemplates(v []TemplateApplyTemplate) {
	o.Templates = v
}

// GetEnvRefs returns the EnvRefs field value if set, zero value otherwise.
func (o *TemplateApply) GetEnvRefs() map[string]map[string]interface{} {
	if o == nil || o.EnvRefs == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.EnvRefs
}

// GetEnvRefsOk returns a tuple with the EnvRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateApply) GetEnvRefsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.EnvRefs == nil {
		return nil, false
	}
	return o.EnvRefs, true
}

// HasEnvRefs returns a boolean if a field has been set.
func (o *TemplateApply) HasEnvRefs() bool {
	if o != nil && o.EnvRefs != nil {
		return true
	}

	return false
}

// SetEnvRefs gets a reference to the given map[string]map[string]interface{} and assigns it to the EnvRefs field.
func (o *TemplateApply) SetEnvRefs(v map[string]map[string]interface{}) {
	o.EnvRefs = &v
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *TemplateApply) GetSecrets() map[string]string {
	if o == nil || o.Secrets == nil {
		var ret map[string]string
		return ret
	}
	return *o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateApply) GetSecretsOk() (*map[string]string, bool) {
	if o == nil || o.Secrets == nil {
		return nil, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *TemplateApply) HasSecrets() bool {
	if o != nil && o.Secrets != nil {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given map[string]string and assigns it to the Secrets field.
func (o *TemplateApply) SetSecrets(v map[string]string) {
	o.Secrets = &v
}

// GetRemotes returns the Remotes field value
func (o *TemplateApply) GetRemotes() []TemplateApplyRemoteRef {
	if o == nil {
		var ret []TemplateApplyRemoteRef
		return ret
	}

	return o.Remotes
}

// GetRemotesOk returns a tuple with the Remotes field value
// and a boolean to check if the value has been set.
func (o *TemplateApply) GetRemotesOk() (*[]TemplateApplyRemoteRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Remotes, true
}

// SetRemotes sets field value
func (o *TemplateApply) SetRemotes(v []TemplateApplyRemoteRef) {
	o.Remotes = v
}

// GetActions returns the Actions field value
func (o *TemplateApply) GetActions() []TemplateApplyAction {
	if o == nil {
		var ret []TemplateApplyAction
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *TemplateApply) GetActionsOk() (*[]TemplateApplyAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actions, true
}

// SetActions sets field value
func (o *TemplateApply) SetActions(v []TemplateApplyAction) {
	o.Actions = v
}

func (o TemplateApply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dryRun"] = o.DryRun
	}
	if true {
		toSerialize["orgID"] = o.OrgID
	}
	if o.StackID != nil {
		toSerialize["stackID"] = o.StackID
	}
	if o.Template != nil {
		toSerialize["template"] = o.Template
	}
	if true {
		toSerialize["templates"] = o.Templates
	}
	if o.EnvRefs != nil {
		toSerialize["envRefs"] = o.EnvRefs
	}
	if o.Secrets != nil {
		toSerialize["secrets"] = o.Secrets
	}
	if true {
		toSerialize["remotes"] = o.Remotes
	}
	if true {
		toSerialize["actions"] = o.Actions
	}
	return json.Marshal(toSerialize)
}

type NullableTemplateApply struct {
	value *TemplateApply
	isSet bool
}

func (v NullableTemplateApply) Get() *TemplateApply {
	return v.value
}

func (v *NullableTemplateApply) Set(val *TemplateApply) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateApply) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateApply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateApply(val *TemplateApply) *NullableTemplateApply {
	return &NullableTemplateApply{value: val, isSet: true}
}

func (v NullableTemplateApply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateApply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
