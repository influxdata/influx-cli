/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// TemplateKind the model 'TemplateKind'
type TemplateKind string

// List of TemplateKind
const (
	TEMPLATEKIND_BUCKET                           TemplateKind = "Bucket"
	TEMPLATEKIND_CHECK                            TemplateKind = "Check"
	TEMPLATEKIND_CHECK_DEADMAN                    TemplateKind = "CheckDeadman"
	TEMPLATEKIND_CHECK_THRESHOLD                  TemplateKind = "CheckThreshold"
	TEMPLATEKIND_DASHBOARD                        TemplateKind = "Dashboard"
	TEMPLATEKIND_LABEL                            TemplateKind = "Label"
	TEMPLATEKIND_NOTIFICATION_ENDPOINT            TemplateKind = "NotificationEndpoint"
	TEMPLATEKIND_NOTIFICATION_ENDPOINT_HTTP       TemplateKind = "NotificationEndpointHTTP"
	TEMPLATEKIND_NOTIFICATION_ENDPOINT_PAGER_DUTY TemplateKind = "NotificationEndpointPagerDuty"
	TEMPLATEKIND_NOTIFICATION_ENDPOINT_SLACK      TemplateKind = "NotificationEndpointSlack"
	TEMPLATEKIND_NOTIFICATION_RULE                TemplateKind = "NotificationRule"
	TEMPLATEKIND_TASK                             TemplateKind = "Task"
	TEMPLATEKIND_TELEGRAF                         TemplateKind = "Telegraf"
	TEMPLATEKIND_VARIABLE                         TemplateKind = "Variable"
)

func (v *TemplateKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TemplateKind(value)
	for _, existing := range []TemplateKind{"Bucket", "Check", "CheckDeadman", "CheckThreshold", "Dashboard", "Label", "NotificationEndpoint", "NotificationEndpointHTTP", "NotificationEndpointPagerDuty", "NotificationEndpointSlack", "NotificationRule", "Task", "Telegraf", "Variable"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TemplateKind", value)
}

// Ptr returns reference to TemplateKind value
func (v TemplateKind) Ptr() *TemplateKind {
	return &v
}

type NullableTemplateKind struct {
	value *TemplateKind
	isSet bool
}

func (v NullableTemplateKind) Get() *TemplateKind {
	return v.value
}

func (v *NullableTemplateKind) Set(val *TemplateKind) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateKind) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateKind(val *TemplateKind) *NullableTemplateKind {
	return &NullableTemplateKind{value: val, isSet: true}
}

func (v NullableTemplateKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
