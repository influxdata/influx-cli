/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// TemplateSummaryDiffVariable struct for TemplateSummaryDiffVariable
type TemplateSummaryDiffVariable struct {
	Kind             string                             `json:"kind" yaml:"kind"`
	StateStatus      string                             `json:"stateStatus" yaml:"stateStatus"`
	Id               uint64                             `json:"id" yaml:"id"`
	TemplateMetaName string                             `json:"templateMetaName" yaml:"templateMetaName"`
	New              *TemplateSummaryDiffVariableFields `json:"new,omitempty" yaml:"new,omitempty"`
	Old              *TemplateSummaryDiffVariableFields `json:"old,omitempty" yaml:"old,omitempty"`
}

// NewTemplateSummaryDiffVariable instantiates a new TemplateSummaryDiffVariable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateSummaryDiffVariable(kind string, stateStatus string, id uint64, templateMetaName string) *TemplateSummaryDiffVariable {
	this := TemplateSummaryDiffVariable{}
	this.Kind = kind
	this.StateStatus = stateStatus
	this.Id = id
	this.TemplateMetaName = templateMetaName
	return &this
}

// NewTemplateSummaryDiffVariableWithDefaults instantiates a new TemplateSummaryDiffVariable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateSummaryDiffVariableWithDefaults() *TemplateSummaryDiffVariable {
	this := TemplateSummaryDiffVariable{}
	return &this
}

// GetKind returns the Kind field value
func (o *TemplateSummaryDiffVariable) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *TemplateSummaryDiffVariable) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *TemplateSummaryDiffVariable) SetKind(v string) {
	o.Kind = v
}

// GetStateStatus returns the StateStatus field value
func (o *TemplateSummaryDiffVariable) GetStateStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateStatus
}

// GetStateStatusOk returns a tuple with the StateStatus field value
// and a boolean to check if the value has been set.
func (o *TemplateSummaryDiffVariable) GetStateStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateStatus, true
}

// SetStateStatus sets field value
func (o *TemplateSummaryDiffVariable) SetStateStatus(v string) {
	o.StateStatus = v
}

// GetId returns the Id field value
func (o *TemplateSummaryDiffVariable) GetId() uint64 {
	if o == nil {
		var ret uint64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TemplateSummaryDiffVariable) GetIdOk() (*uint64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TemplateSummaryDiffVariable) SetId(v uint64) {
	o.Id = v
}

// GetTemplateMetaName returns the TemplateMetaName field value
func (o *TemplateSummaryDiffVariable) GetTemplateMetaName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TemplateMetaName
}

// GetTemplateMetaNameOk returns a tuple with the TemplateMetaName field value
// and a boolean to check if the value has been set.
func (o *TemplateSummaryDiffVariable) GetTemplateMetaNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TemplateMetaName, true
}

// SetTemplateMetaName sets field value
func (o *TemplateSummaryDiffVariable) SetTemplateMetaName(v string) {
	o.TemplateMetaName = v
}

// GetNew returns the New field value if set, zero value otherwise.
func (o *TemplateSummaryDiffVariable) GetNew() TemplateSummaryDiffVariableFields {
	if o == nil || o.New == nil {
		var ret TemplateSummaryDiffVariableFields
		return ret
	}
	return *o.New
}

// GetNewOk returns a tuple with the New field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSummaryDiffVariable) GetNewOk() (*TemplateSummaryDiffVariableFields, bool) {
	if o == nil || o.New == nil {
		return nil, false
	}
	return o.New, true
}

// HasNew returns a boolean if a field has been set.
func (o *TemplateSummaryDiffVariable) HasNew() bool {
	if o != nil && o.New != nil {
		return true
	}

	return false
}

// SetNew gets a reference to the given TemplateSummaryDiffVariableFields and assigns it to the New field.
func (o *TemplateSummaryDiffVariable) SetNew(v TemplateSummaryDiffVariableFields) {
	o.New = &v
}

// GetOld returns the Old field value if set, zero value otherwise.
func (o *TemplateSummaryDiffVariable) GetOld() TemplateSummaryDiffVariableFields {
	if o == nil || o.Old == nil {
		var ret TemplateSummaryDiffVariableFields
		return ret
	}
	return *o.Old
}

// GetOldOk returns a tuple with the Old field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSummaryDiffVariable) GetOldOk() (*TemplateSummaryDiffVariableFields, bool) {
	if o == nil || o.Old == nil {
		return nil, false
	}
	return o.Old, true
}

// HasOld returns a boolean if a field has been set.
func (o *TemplateSummaryDiffVariable) HasOld() bool {
	if o != nil && o.Old != nil {
		return true
	}

	return false
}

// SetOld gets a reference to the given TemplateSummaryDiffVariableFields and assigns it to the Old field.
func (o *TemplateSummaryDiffVariable) SetOld(v TemplateSummaryDiffVariableFields) {
	o.Old = &v
}

func (o TemplateSummaryDiffVariable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["stateStatus"] = o.StateStatus
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["templateMetaName"] = o.TemplateMetaName
	}
	if o.New != nil {
		toSerialize["new"] = o.New
	}
	if o.Old != nil {
		toSerialize["old"] = o.Old
	}
	return json.Marshal(toSerialize)
}

type NullableTemplateSummaryDiffVariable struct {
	value *TemplateSummaryDiffVariable
	isSet bool
}

func (v NullableTemplateSummaryDiffVariable) Get() *TemplateSummaryDiffVariable {
	return v.value
}

func (v *NullableTemplateSummaryDiffVariable) Set(val *TemplateSummaryDiffVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateSummaryDiffVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateSummaryDiffVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateSummaryDiffVariable(val *TemplateSummaryDiffVariable) *NullableTemplateSummaryDiffVariable {
	return &NullableTemplateSummaryDiffVariable{value: val, isSet: true}
}

func (v NullableTemplateSummaryDiffVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateSummaryDiffVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
