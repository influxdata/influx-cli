/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// TemplateSummaryError struct for TemplateSummaryError
type TemplateSummaryError struct {
	Kind    string   `json:"kind"`
	Reason  string   `json:"reason"`
	Fields  []string `json:"fields"`
	Indexes []int32  `json:"indexes"`
}

// NewTemplateSummaryError instantiates a new TemplateSummaryError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateSummaryError(kind string, reason string, fields []string, indexes []int32) *TemplateSummaryError {
	this := TemplateSummaryError{}
	this.Kind = kind
	this.Reason = reason
	this.Fields = fields
	this.Indexes = indexes
	return &this
}

// NewTemplateSummaryErrorWithDefaults instantiates a new TemplateSummaryError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateSummaryErrorWithDefaults() *TemplateSummaryError {
	this := TemplateSummaryError{}
	return &this
}

// GetKind returns the Kind field value
func (o *TemplateSummaryError) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *TemplateSummaryError) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *TemplateSummaryError) SetKind(v string) {
	o.Kind = v
}

// GetReason returns the Reason field value
func (o *TemplateSummaryError) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *TemplateSummaryError) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *TemplateSummaryError) SetReason(v string) {
	o.Reason = v
}

// GetFields returns the Fields field value
func (o *TemplateSummaryError) GetFields() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *TemplateSummaryError) GetFieldsOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fields, true
}

// SetFields sets field value
func (o *TemplateSummaryError) SetFields(v []string) {
	o.Fields = v
}

// GetIndexes returns the Indexes field value
func (o *TemplateSummaryError) GetIndexes() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Indexes
}

// GetIndexesOk returns a tuple with the Indexes field value
// and a boolean to check if the value has been set.
func (o *TemplateSummaryError) GetIndexesOk() (*[]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Indexes, true
}

// SetIndexes sets field value
func (o *TemplateSummaryError) SetIndexes(v []int32) {
	o.Indexes = v
}

func (o TemplateSummaryError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["fields"] = o.Fields
	}
	if true {
		toSerialize["indexes"] = o.Indexes
	}
	return json.Marshal(toSerialize)
}

type NullableTemplateSummaryError struct {
	value *TemplateSummaryError
	isSet bool
}

func (v NullableTemplateSummaryError) Get() *TemplateSummaryError {
	return v.value
}

func (v *NullableTemplateSummaryError) Set(val *TemplateSummaryError) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateSummaryError) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateSummaryError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateSummaryError(val *TemplateSummaryError) *NullableTemplateSummaryError {
	return &NullableTemplateSummaryError{value: val, isSet: true}
}

func (v NullableTemplateSummaryError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateSummaryError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
