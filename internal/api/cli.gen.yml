openapi: 3.0.0
info:
  title: Subset of Influx API covered by Influx CLI
  version: 2.0.0
servers:
  - url: /api/v2
paths:
  /health:
    servers:
      - url: ''
    get:
      operationId: GetHealth
      tags:
        - Health
      summary: Get the health of an instance
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
      responses:
        '200':
          description: The instance is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '503':
          description: The instance is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        default:
          description: Unexpected error
          $ref: '#/paths/~1setup/post/responses/default'
  /setup:
    get:
      operationId: GetSetup
      tags:
        - Setup
      summary: 'Check if database has default user, org, bucket'
      description: 'Returns `true` if no default user, organization, or bucket has been created.'
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
      responses:
        '200':
          description: allowed true or false
          content:
            application/json:
              schema:
                type: object
                properties:
                  allowed:
                    description: True means that the influxdb instance has NOT had initial setup; false means that the database has been setup.
                    type: boolean
    post:
      operationId: PostSetup
      tags:
        - Setup
      summary: 'Set up initial user, org and bucket'
      description: 'Post an onboarding request to set up initial user, org and bucket.'
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        description: Source to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingRequest'
      responses:
        '201':
          description: 'Created default user, bucket, org'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /write:
    post:
      operationId: PostWrite
      tags:
        - Write
      summary: Write time series data into InfluxDB
      requestBody:
        description: Line protocol body
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: byte
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: header
          name: Content-Encoding
          description: 'When present, its value indicates to the database that compression is applied to the line-protocol body.'
          schema:
            type: string
            description: Specifies that the line protocol in the body is encoded with gzip or not encoded with identity.
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          description: Content-Type is used to indicate the format of the data sent to the server.
          schema:
            type: string
            description: Text/plain specifies the text line protocol; charset is assumed to be utf-8.
            default: text/plain; charset=utf-8
            enum:
              - text/plain
              - text/plain; charset=utf-8
              - application/vnd.influx.arrow
        - in: header
          name: Content-Length
          description: 'Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent.'
          schema:
            type: integer
            description: The length in decimal number of octets.
        - in: header
          name: Accept
          description: Specifies the return content format.
          schema:
            type: string
            description: The return format for errors.
            default: application/json
            enum:
              - application/json
        - in: query
          name: org
          description: 'Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.'
          required: true
          schema:
            type: string
            description: All points within batch are written to this organization.
        - in: query
          name: orgID
          description: 'Specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence.'
          schema:
            type: string
        - in: query
          name: bucket
          description: The destination bucket for writes.
          required: true
          schema:
            type: string
            description: All points within batch are written to this bucket.
        - in: query
          name: precision
          description: The precision for the unix timestamps within the body line-protocol.
          schema:
            $ref: '#/components/schemas/WritePrecision'
      responses:
        '204':
          description: Write data is correctly formatted and accepted for writing to the bucket.
        '400':
          description: Line protocol poorly formed and no points were written.  Response can be used to determine the first malformed line in the body line-protocol. All data in body was rejected and not written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineProtocolError'
        '401':
          description: Token does not have sufficient permissions to write to this organization and bucket or the organization and bucket do not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: No token was sent and they are required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: Write has been rejected because the payload is too large. Error message returns max size supported. All data in body was rejected and not written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineProtocolLengthError'
        '429':
          description: Token is temporarily over quota. The Retry-After header describes when to try the write again.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to delay after the response is received.
              schema:
                type: integer
                format: int32
        '503':
          description: Server is temporarily unavailable to accept writes.  The Retry-After header describes when to try the write again.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to delay after the response is received.
              schema:
                type: integer
                format: int32
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /buckets:
    get:
      operationId: GetBuckets
      tags:
        - Buckets
      summary: List all buckets
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/After'
        - in: query
          name: org
          description: The organization name.
          schema:
            type: string
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
        - in: query
          name: name
          description: Only returns buckets with a specific name.
          schema:
            type: string
        - in: query
          name: id
          description: Only returns buckets with a specific ID.
          schema:
            type: string
      responses:
        '200':
          description: A list of buckets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buckets'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: PostBuckets
      tags:
        - Buckets
      summary: Create a bucket
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        description: Bucket to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBucketRequest'
      responses:
        '201':
          description: Bucket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        '422':
          description: Request body failed validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/buckets/{bucketID}':
    get:
      operationId: GetBucketsID
      tags:
        - Buckets
      summary: Retrieve a bucket
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      responses:
        '200':
          description: Bucket details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      operationId: PatchBucketsID
      tags:
        - Buckets
      summary: Update a bucket
      requestBody:
        description: Bucket update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBucketRequest'
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      responses:
        '200':
          description: An updated bucket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: DeleteBucketsID
      tags:
        - Buckets
      summary: Delete a bucket
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The ID of the bucket to delete.
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Bucket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orgs:
    get:
      operationId: GetOrgs
      tags:
        - Organizations
      summary: List all organizations
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Descending'
        - in: query
          name: org
          schema:
            type: string
          description: Filter organizations to a specific organization name.
        - in: query
          name: orgID
          schema:
            type: string
          description: Filter organizations to a specific organization ID.
        - in: query
          name: userID
          schema:
            type: string
          description: Filter organizations to a specific user ID.
      responses:
        '200':
          description: A list of organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organizations'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: PostOrgs
      tags:
        - Organizations
      summary: Create an organization
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        description: Organization to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostOrganizationRequest'
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/orgs/{orgID}':
    get:
      operationId: GetOrgsID
      tags:
        - Organizations
      summary: Retrieve an organization
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The ID of the organization to get.
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      operationId: PatchOrgsID
      tags:
        - Organizations
      summary: Update an organization
      requestBody:
        description: Organization update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchOrganizationRequest'
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The ID of the organization to get.
      responses:
        '200':
          description: Organization updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: DeleteOrgsID
      tags:
        - Organizations
      summary: Delete an organization
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The ID of the organization to delete.
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/orgs/{orgID}/members':
    get:
      operationId: GetOrgsIDMembers
      tags:
        - Organizations
      summary: List all members of an organization
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      responses:
        '200':
          description: A list of organization members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMembers'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: PostOrgsIDMembers
      tags:
        - Organizations
      summary: Add a member to an organization
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      requestBody:
        description: User to add as member
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
      responses:
        '201':
          description: Added to organization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMember'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/orgs/{orgID}/members/{userID}':
    delete:
      operationId: DeleteOrgsIDMembersID
      tags:
        - Organizations
      summary: Remove a member from an organization
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the member to remove.
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      responses:
        '204':
          description: Member removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/buckets/{bucketID}/schema/measurements':
    summary: APIs for describing bucket schema
    get:
      summary: Retrieve a list of measurement schemas defined for this bucket
      operationId: getMeasurementSchemas
      parameters:
        - in: query
          name: org
          description: The organization name.
          schema:
            type: string
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
        - in: query
          name: name
          description: Find a measurement with matching name.
          schema:
            type: string
        - in: path
          name: bucketID
          description: The ID of the bucket
          schema:
            type: string
          required: true
      tags:
        - Bucket Schemas
      responses:
        '200':
          description: A list of measurement schemas returning summary information
          headers:
            ETag:
              description: The current version of the bucket schema
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementSchemaList'
        '404':
          description: Bucket not found
          $ref: '#/paths/~1setup/post/responses/default'
    post:
      summary: Create a new measurement schema for this bucket
      operationId: createMeasurementSchema
      parameters:
        - in: query
          name: org
          description: The organization name.
          schema:
            type: string
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
        - in: path
          name: bucketID
          description: The ID of the bucket
          schema:
            type: string
          required: true
      tags:
        - Bucket Schemas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementSchemaCreateRequest'
      responses:
        '201':
          description: New measurement schema
          headers:
            ETag:
              description: The current version of the measurement schema
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementSchema'
        '400':
          description: Client error with create request
          content:
            application/json:
              examples:
                badNameExample:
                  summary: Invalid name
                  description: 'The error returned when the name is invalid, such as too few or too many characters or the name contains non-printable ASCII or is not valid UTF-8.'
                  value:
                    code: invalid
                    message: name is invalid
                missingColumnsExample:
                  summary: Missing columns
                  description: The error returned when the request body is missing the columns property.
                  value:
                    code: invalid
                    message: columns is required
                missingTimestampExample:
                  summary: Missing timestamp
                  description: The error returned when the request body is missing a timestamp type column.
                  value:
                    code: invalid
                    message: Timestamp column is required
                duplicateColumnNamesExample:
                  summary: Duplicate column names
                  description: The error returned when the request body contains duplicate column names.
                  value:
                    code: invalid
                    message: Duplicate column names
                missingFieldExample:
                  summary: Missing field
                  description: The error returned when the request body is missing at least one field type column.
                  value:
                    code: invalid
                    message: At least one field column is required
              schema:
                $ref: '#/components/schemas/Error'
  '/buckets/{bucketID}/schema/measurements/{measurementID}':
    summary: APIs for describing tables
    get:
      summary: Fetch schema information for a measurement
      operationId: getMeasurementSchema
      parameters:
        - in: query
          name: org
          description: The organization name.
          schema:
            type: string
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
        - in: path
          name: bucketID
          description: The ID of the bucket
          schema:
            type: string
          required: true
        - in: path
          name: measurementID
          description: The ID of the measurement
          schema:
            type: string
          required: true
      tags:
        - Bucket Schemas
      responses:
        '200':
          description: Schema definition for a single measurement
          headers:
            ETag:
              description: The current version of the measurement schema
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementSchema'
    patch:
      summary: Update existing measurement schema
      operationId: updateMeasurementSchema
      parameters:
        - in: query
          name: org
          description: The organization name.
          schema:
            type: string
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
        - in: path
          name: bucketID
          description: The ID of the bucket
          schema:
            type: string
          required: true
        - in: path
          name: measurementID
          description: The ID of the measurement
          schema:
            type: string
          required: true
      tags:
        - Bucket Schemas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementSchemaUpdateRequest'
      responses:
        '200':
          description: Updated measurement schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementSchema'
        '400':
          description: Client error updating measurement schema
          content:
            application/json:
              examples:
                missingColumnsExample:
                  summary: Deleted columns
                  description: The error returned when the request body does not contain all the columns from the source.
                  value:
                    code: invalid
                    message: Unable to delete columns from schema
              schema:
                $ref: '#/components/schemas/Error'
  /query:
    post:
      operationId: PostQuery
      tags:
        - Query
      summary: Query InfluxDB
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: header
          name: Accept-Encoding
          description: 'The Accept-Encoding request HTTP header advertises which content encoding, usually a compression algorithm, the client is able to understand.'
          schema:
            type: string
            description: Specifies that the query response in the body should be encoded with gzip or not encoded with identity.
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          schema:
            type: string
            enum:
              - application/json
        - in: query
          name: org
          description: 'Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.'
          schema:
            type: string
        - in: query
          name: orgID
          description: 'Specifies the ID of the organization executing the query. If both `orgID` and `org` are specified, `org` takes precedence.'
          schema:
            type: string
      requestBody:
        description: Flux query or specification to execute
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        '200':
          description: Query results
          headers:
            Content-Encoding:
              description: 'The Content-Encoding entity header is used to compress the media-type.  When present, its value indicates which encodings were applied to the entity-body'
              schema:
                type: string
                description: Specifies that the response in the body is encoded with gzip or not encoded with identity.
                default: identity
                enum:
                  - gzip
                  - identity
            Trace-Id:
              description: 'The Trace-Id header reports the request''s trace ID, if one was generated.'
              schema:
                type: string
                description: Specifies the request's trace ID.
          content:
            text/csv:
              schema:
                type: string
                format: binary
                example: |
                  result,table,_start,_stop,_time,region,host,_value mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:00Z,east,A,15.43 mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:20Z,east,B,59.25 mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:40Z,east,C,52.62
        '429':
          description: Token is temporarily over quota. The Retry-After header describes when to try the read again.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to delay after the response is received.
              schema:
                type: integer
                format: int32
        default:
          description: Error processing query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/users/{userID}':
    get:
      operationId: GetUsersID
      tags:
        - Users
      summary: Retrieve a user
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The user ID.
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: Unexpected error
          $ref: '#/paths/~1setup/post/responses/default'
    patch:
      operationId: PatchUsersID
      tags:
        - Users
      summary: Update a user
      requestBody:
        description: User update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the user to update.
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: Unexpected error
          $ref: '#/paths/~1setup/post/responses/default'
    delete:
      operationId: DeleteUsersID
      tags:
        - Users
      summary: Delete a user
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the user to delete.
      responses:
        '204':
          description: User deleted
        default:
          description: Unexpected error
          $ref: '#/paths/~1setup/post/responses/default'
  /delete:
    post:
      operationId: PostDelete
      tags:
        - Delete
      summary: Delete time series data from InfluxDB
      requestBody:
        description: Predicate delete request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePredicateRequest'
      parameters:
        - $ref: '#/components/parameters/TraceSpan'
        - in: query
          name: org
          description: Specifies the organization to delete data from.
          schema:
            type: string
            description: Only points from this organization are deleted.
        - in: query
          name: bucket
          description: Specifies the bucket to delete data from.
          schema:
            type: string
            description: Only points from this bucket are deleted.
        - in: query
          name: orgID
          description: Specifies the organization ID of the resource.
          schema:
            type: string
        - in: query
          name: bucketID
          description: Specifies the bucket ID to delete data from.
          schema:
            type: string
            description: Only points from this bucket ID are deleted.
      responses:
        '204':
          description: delete has been accepted
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: no token was sent or does not have sufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: the bucket or organization is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  parameters:
    TraceSpan:
      in: header
      name: Zap-Trace-Span
      description: OpenTracing span context
      example:
        trace_id: '1'
        span_id: '1'
        baggage:
          key: value
      required: false
      schema:
        type: string
    Offset:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
    Limit:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    After:
      in: query
      name: after
      required: false
      schema:
        type: string
      description: |
        The last resource ID from which to seek from (but not including). This is to be used instead of `offset`.
    Descending:
      in: query
      name: descending
      required: false
      schema:
        type: boolean
        default: false
  schemas:
    Error:
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
        message:
          readOnly: true
          description: message is a human-readable message.
          type: string
        op:
          readOnly: true
          description: op describes the logical code operation during error. Useful for debugging.
          type: string
        err:
          readOnly: true
          description: err is a stack of errors that occurred during processing of the request. Useful for debugging.
          type: string
      required:
        - code
        - message
    ErrorCode:
      description: code is the machine-readable error code.
      readOnly: true
      type: string
      enum:
        - internal error
        - not found
        - conflict
        - invalid
        - unprocessable entity
        - empty value
        - unavailable
        - forbidden
        - too many requests
        - unauthorized
        - method not allowed
        - request too large
    HealthCheck:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
        message:
          type: string
        checks:
          type: array
          items:
            $ref: '#/components/schemas/HealthCheck'
        status:
          $ref: '#/components/schemas/HealthCheckStatus'
        version:
          type: string
        commit:
          type: string
    HealthCheckStatus:
      type: string
      enum:
        - pass
        - fail
    OnboardingRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        org:
          type: string
        bucket:
          type: string
        retentionPeriodSeconds:
          type: integer
          format: int64
        retentionPeriodHrs:
          type: integer
          deprecated: true
          description: |
            Retention period *in nanoseconds* for the new bucket. This key's name has been misleading since OSS 2.0 GA, please transition to use `retentionPeriodSeconds`
        token:
          type: string
          description: |
            Authentication token to set on the initial user. If not specified, the server will generate a token.
      required:
        - username
        - org
        - bucket
    OnboardingResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponse'
        org:
          $ref: '#/components/schemas/Organization'
        bucket:
          $ref: '#/components/schemas/Bucket'
        auth:
          $ref: '#/components/schemas/Authorization'
    User:
      properties:
        id:
          readOnly: true
          type: string
        oauthID:
          type: string
        name:
          type: string
        status:
          description: If inactive the user is inactive.
          default: active
          type: string
          enum:
            - active
            - inactive
      required:
        - name
    UserResponse:
      properties:
        id:
          readOnly: true
          type: string
        oauthID:
          type: string
        name:
          type: string
        status:
          description: If inactive the user is inactive.
          default: active
          type: string
          enum:
            - active
            - inactive
        links:
          type: object
          readOnly: true
          example:
            self: /api/v2/users/1
          properties:
            self:
              type: string
              format: uri
      required:
        - name
    Links:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/Link'
        self:
          $ref: '#/components/schemas/Link'
        prev:
          $ref: '#/components/schemas/Link'
      required:
        - self
    Link:
      type: string
      format: uri
      readOnly: true
      description: URI of resource.
    Organizations:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/Links'
        orgs:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
    Organization:
      properties:
        links:
          type: object
          readOnly: true
          example:
            self: /api/v2/orgs/1
            members: /api/v2/orgs/1/members
            owners: /api/v2/orgs/1/owners
            labels: /api/v2/orgs/1/labels
            secrets: /api/v2/orgs/1/secrets
            buckets: /api/v2/buckets?org=myorg
            tasks: /api/v2/tasks?org=myorg
            dashboards: /api/v2/dashboards?org=myorg
          properties:
            self:
              $ref: '#/components/schemas/Link'
            members:
              $ref: '#/components/schemas/Link'
            owners:
              $ref: '#/components/schemas/Link'
            labels:
              $ref: '#/components/schemas/Link'
            secrets:
              $ref: '#/components/schemas/Link'
            buckets:
              $ref: '#/components/schemas/Link'
            tasks:
              $ref: '#/components/schemas/Link'
            dashboards:
              $ref: '#/components/schemas/Link'
        id:
          readOnly: true
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        status:
          description: If inactive the organization is inactive.
          default: active
          type: string
          enum:
            - active
            - inactive
      required:
        - name
    PostOrganizationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
    PatchOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          description: New name to set on the organization
        description:
          type: string
          description: New description to set on the organization
    Buckets:
      type: object
      properties:
        links:
          readOnly: true
          $ref: '#/components/schemas/Links'
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/Bucket'
    Bucket:
      properties:
        links:
          type: object
          readOnly: true
          example:
            labels: /api/v2/buckets/1/labels
            members: /api/v2/buckets/1/members
            org: /api/v2/orgs/2
            owners: /api/v2/buckets/1/owners
            self: /api/v2/buckets/1
            write: /api/v2/write?org=2&bucket=1
          properties:
            labels:
              description: URL to retrieve labels for this bucket
              $ref: '#/components/schemas/Link'
            members:
              description: URL to retrieve members that can read this bucket
              $ref: '#/components/schemas/Link'
            org:
              description: URL to retrieve parent organization for this bucket
              $ref: '#/components/schemas/Link'
            owners:
              description: URL to retrieve owners that can read and write to this bucket.
              $ref: '#/components/schemas/Link'
            self:
              description: URL for this bucket
              $ref: '#/components/schemas/Link'
            write:
              description: URL to write line protocol for this bucket
              $ref: '#/components/schemas/Link'
        id:
          readOnly: true
          type: string
        type:
          readOnly: true
          type: string
          default: user
          enum:
            - user
            - system
        name:
          type: string
        description:
          type: string
        orgID:
          type: string
        rp:
          type: string
        schemaType:
          $ref: '#/components/schemas/SchemaType'
          default: implicit
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        retentionRules:
          $ref: '#/components/schemas/RetentionRules'
        labels:
          $ref: '#/components/schemas/Labels'
      required:
        - name
        - retentionRules
    PostBucketRequest:
      properties:
        orgID:
          type: string
        name:
          type: string
        description:
          type: string
        rp:
          type: string
        retentionRules:
          $ref: '#/components/schemas/RetentionRules'
        schemaType:
          $ref: '#/components/schemas/SchemaType'
          default: implicit
      required:
        - orgID
        - name
        - retentionRules
    RetentionRules:
      type: array
      description: Rules to expire or retain data.  No rules means data never expires.
      items:
        $ref: '#/components/schemas/RetentionRule'
    RetentionRule:
      type: object
      properties:
        type:
          type: string
          default: expire
          enum:
            - expire
        everySeconds:
          type: integer
          format: int64
          description: Duration in seconds for how long data will be kept in the database. 0 means infinite.
          example: 86400
          minimum: 0
        shardGroupDurationSeconds:
          type: integer
          format: int64
          description: Shard duration measured in seconds.
      required:
        - type
        - everySeconds
    PatchBucketRequest:
      type: object
      description: Updates to an existing bucket resource.
      properties:
        name:
          type: string
        description:
          type: string
        retentionRules:
          $ref: '#/components/schemas/PatchRetentionRules'
    PatchRetentionRules:
      type: array
      description: Updates to rules to expire or retain data. No rules means no updates.
      items:
        $ref: '#/components/schemas/PatchRetentionRule'
    PatchRetentionRule:
      type: object
      description: Updates to a rule to expire or retain data.
      properties:
        type:
          type: string
          default: expire
          enum:
            - expire
        everySeconds:
          type: integer
          format: int64
          description: Duration in seconds for how long data will be kept in the database. 0 means infinite.
          example: 86400
          minimum: 0
        shardGroupDurationSeconds:
          type: integer
          format: int64
          description: Shard duration measured in seconds.
      required:
        - type
    Labels:
      type: array
      items:
        $ref: '#/components/schemas/Label'
    Label:
      type: object
      properties:
        id:
          readOnly: true
          type: string
        orgID:
          readOnly: true
          type: string
        name:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
          description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.
          example:
            color: ffb3b3
            description: this is a description
    Authorization:
      required:
        - orgID
        - permissions
      allOf:
        - $ref: '#/components/schemas/AuthorizationUpdateRequest'
        - type: object
          properties:
            createdAt:
              type: string
              format: date-time
              readOnly: true
            updatedAt:
              type: string
              format: date-time
              readOnly: true
            orgID:
              type: string
              description: ID of org that authorization is scoped to.
            permissions:
              type: array
              minItems: 1
              description: List of permissions for an auth.  An auth must have at least one Permission.
              items:
                $ref: '#/components/schemas/Permission'
            id:
              readOnly: true
              type: string
            token:
              readOnly: true
              type: string
              description: Passed via the Authorization Header and Token Authentication type.
            userID:
              readOnly: true
              type: string
              description: ID of user that created and owns the token.
            user:
              readOnly: true
              type: string
              description: Name of user that created and owns the token.
            org:
              readOnly: true
              type: string
              description: Name of the org token is scoped to.
            links:
              type: object
              readOnly: true
              example:
                self: /api/v2/authorizations/1
                user: /api/v2/users/12
              properties:
                self:
                  readOnly: true
                  $ref: '#/components/schemas/Link'
                user:
                  readOnly: true
                  $ref: '#/components/schemas/Link'
    AuthorizationUpdateRequest:
      properties:
        status:
          description: If inactive the token is inactive and requests using the token will be rejected.
          default: active
          type: string
          enum:
            - active
            - inactive
        description:
          type: string
          description: A description of the token.
    Permission:
      required:
        - action
        - resource
      properties:
        action:
          type: string
          enum:
            - read
            - write
        resource:
          type: object
          required:
            - type
          properties:
            type:
              type: string
              enum:
                - authorizations
                - buckets
                - dashboards
                - orgs
                - sources
                - tasks
                - telegrafs
                - users
                - variables
                - scrapers
                - secrets
                - labels
                - views
                - documents
                - notificationRules
                - notificationEndpoints
                - checks
                - dbrp
            id:
              type: string
              nullable: true
              description: If ID is set that is a permission for a specific resource. if it is not set it is a permission for all resources of that resource type.
            name:
              type: string
              nullable: true
              description: Optional name of the resource if the resource has a name field.
            orgID:
              type: string
              nullable: true
              description: If orgID is set that is a permission for all resources owned my that org. if it is not set it is a permission for all resources of that resource type.
            org:
              type: string
              nullable: true
              description: Optional name of the organization of the organization with orgID.
    ResourceMembers:
      type: object
      properties:
        links:
          type: object
          properties:
            self:
              type: string
              format: uri
        users:
          type: array
          items:
            $ref: '#/components/schemas/ResourceMember'
    ResourceMember:
      allOf:
        - $ref: '#/components/schemas/UserResponse'
        - type: object
          properties:
            role:
              type: string
              default: member
              enum:
                - member
    AddResourceMemberRequestBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
    WritePrecision:
      type: string
      enum:
        - ms
        - s
        - us
        - ns
    LineProtocolError:
      properties:
        code:
          description: Code is the machine-readable error code.
          readOnly: true
          type: string
          enum:
            - internal error
            - not found
            - conflict
            - invalid
            - empty value
            - unavailable
        message:
          readOnly: true
          description: Message is a human-readable message.
          type: string
        op:
          readOnly: true
          description: Op describes the logical code operation during error. Useful for debugging.
          type: string
        err:
          readOnly: true
          description: Err is a stack of errors that occurred during processing of the request. Useful for debugging.
          type: string
        line:
          readOnly: true
          description: First line within sent body containing malformed data
          type: integer
          format: int32
      required:
        - code
        - message
        - op
        - err
    LineProtocolLengthError:
      properties:
        code:
          description: Code is the machine-readable error code.
          readOnly: true
          type: string
          enum:
            - invalid
        message:
          readOnly: true
          description: Message is a human-readable message.
          type: string
        maxLength:
          readOnly: true
          description: Max length in bytes for a body of line-protocol.
          type: integer
          format: int32
      required:
        - code
        - message
        - maxLength
    SchemaType:
      type: string
      enum:
        - implicit
        - explicit
    ColumnDataType:
      type: string
      enum:
        - integer
        - float
        - boolean
        - string
        - unsigned
    ColumnSemanticType:
      type: string
      nullable: false
      enum:
        - timestamp
        - tag
        - field
    MeasurementSchema:
      description: The schema definition for a single measurement
      type: object
      example:
        id: 1a3c5e7f9b0a8642
        name: cpu
        columns:
          - name: time
            type: timestamp
          - name: host
            type: tag
          - name: region
            type: tag
          - name: usage_user
            type: field
            dataType: float
          - name: usage_user
            type: field
            dataType: float
        createdAt: '2021-01-21T00:48:40.993Z'
        updatedAt: '2021-01-21T00:48:40.993Z'
      required:
        - id
        - name
        - columns
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
          nullable: false
        columns:
          description: An ordered collection of column definitions
          type: array
          items:
            $ref: '#/components/schemas/MeasurementSchemaColumn'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    MeasurementSchemaColumn:
      description: Definition of a measurement column
      example:
        name: time
        type: timestamp
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/ColumnSemanticType'
        dataType:
          $ref: '#/components/schemas/ColumnDataType'
    MeasurementSchemaCreateRequest:
      description: Create a new measurement schema
      type: object
      example:
        name: cpu
        columns:
          - name: time
            type: timestamp
          - name: host
            type: tag
          - name: region
            type: tag
          - name: usage_user
            type: field
            dataType: float
          - name: usage_user
            type: field
            dataType: float
      required:
        - name
        - columns
      properties:
        name:
          type: string
        columns:
          description: An ordered collection of column definitions
          type: array
          items:
            $ref: '#/components/schemas/MeasurementSchemaColumn'
    MeasurementSchemaList:
      description: A list of measurement schemas returning summary information
      example:
        measurementSchemas:
          - id: 1a3c5e7f9b0a8642
            name: cpu
            createdAt: '2021-01-21T00:48:40.993Z'
            updatedAt: '2021-01-21T00:48:40.993Z'
          - id: 1a3c5e7f9b0a8643
            name: memory
            createdAt: '2021-01-21T00:48:40.993Z'
            updatedAt: '2021-01-21T00:48:40.993Z'
          - id: 1a3c5e7f9b0a8644
            name: disk
            createdAt: '2021-01-21T00:48:40.993Z'
            updatedAt: '2021-01-21T00:48:40.993Z'
      type: object
      required:
        - measurementSchemas
      properties:
        measurementSchemas:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementSchema'
    MeasurementSchemaUpdateRequest:
      description: Update an existing measurement schema
      type: object
      example:
        columns:
          - name: time
            type: timestamp
          - name: host
            type: tag
          - name: region
            type: tag
          - name: usage_user
            type: field
            dataType: float
          - name: usage_user
            type: field
            dataType: float
      required:
        - columns
      properties:
        columns:
          description: An ordered collection of column definitions
          type: array
          items:
            $ref: '#/components/schemas/MeasurementSchemaColumn'
    Query:
      description: Query influx using the Flux language
      type: object
      required:
        - query
      properties:
        extern:
          $ref: '#/components/schemas/Extern'
        query:
          description: Query script to execute.
          type: string
        type:
          description: The type of query. Must be "flux".
          type: string
          enum:
            - flux
          default: flux
        dialect:
          $ref: '#/components/schemas/Dialect'
        now:
          description: Specifies the time that should be reported as "now" in the query. Default is the server's now time.
          type: string
          format: date-time
    Dialect:
      description: 'Dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions'
      type: object
      properties:
        header:
          description: 'If true, the results will contain a header row'
          type: boolean
          default: true
        delimiter:
          description: 'Separator between cells; the default is ,'
          type: string
          default: ','
          maxLength: 1
          minLength: 1
        annotations:
          description: 'https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns'
          type: array
          uniqueItems: true
          items:
            type: string
            enum:
              - group
              - datatype
              - default
        commentPrefix:
          description: Character prefixed to comment strings
          type: string
          default: '#'
          maxLength: 1
          minLength: 0
        dateTimeFormat:
          description: Format of timestamps
          type: string
          default: RFC3339
          enum:
            - RFC3339
            - RFC3339Nano
    Extern:
      description: Free-form Flux AST to prepend to query requests
      type: object
      properties:
        type:
          type: string
          enum:
            - File
          default: File
      additionalProperties: true
    DeletePredicateRequest:
      description: The delete predicate request.
      type: object
      required:
        - start
        - stop
      properties:
        start:
          description: RFC3339Nano
          type: string
          format: date-time
        stop:
          description: RFC3339Nano
          type: string
          format: date-time
        predicate:
          description: InfluxQL-like delete statement
          example: tag1="value1" and (tag2="value2" and tag3!="value3")
          type: string
