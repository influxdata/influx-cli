/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CallExpression Represents a function call
type CallExpression struct {
	// Type of AST node
	Type   *string     `json:"type,omitempty"`
	Callee *Expression `json:"callee,omitempty"`
	// Function arguments
	Arguments *[]Expression `json:"arguments,omitempty"`
}

// NewCallExpression instantiates a new CallExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallExpression() *CallExpression {
	this := CallExpression{}
	return &this
}

// NewCallExpressionWithDefaults instantiates a new CallExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallExpressionWithDefaults() *CallExpression {
	this := CallExpression{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CallExpression) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallExpression) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CallExpression) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CallExpression) SetType(v string) {
	o.Type = &v
}

// GetCallee returns the Callee field value if set, zero value otherwise.
func (o *CallExpression) GetCallee() Expression {
	if o == nil || o.Callee == nil {
		var ret Expression
		return ret
	}
	return *o.Callee
}

// GetCalleeOk returns a tuple with the Callee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallExpression) GetCalleeOk() (*Expression, bool) {
	if o == nil || o.Callee == nil {
		return nil, false
	}
	return o.Callee, true
}

// HasCallee returns a boolean if a field has been set.
func (o *CallExpression) HasCallee() bool {
	if o != nil && o.Callee != nil {
		return true
	}

	return false
}

// SetCallee gets a reference to the given Expression and assigns it to the Callee field.
func (o *CallExpression) SetCallee(v Expression) {
	o.Callee = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *CallExpression) GetArguments() []Expression {
	if o == nil || o.Arguments == nil {
		var ret []Expression
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallExpression) GetArgumentsOk() (*[]Expression, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *CallExpression) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []Expression and assigns it to the Arguments field.
func (o *CallExpression) SetArguments(v []Expression) {
	o.Arguments = &v
}

func (o CallExpression) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Callee != nil {
		toSerialize["callee"] = o.Callee
	}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	return json.Marshal(toSerialize)
}

type NullableCallExpression struct {
	value *CallExpression
	isSet bool
}

func (v NullableCallExpression) Get() *CallExpression {
	return v.value
}

func (v *NullableCallExpression) Set(val *CallExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableCallExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableCallExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallExpression(val *CallExpression) *NullableCallExpression {
	return &NullableCallExpression{value: val, isSet: true}
}

func (v NullableCallExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
