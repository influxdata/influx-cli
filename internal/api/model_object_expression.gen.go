/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ObjectExpression Allows the declaration of an anonymous object within a declaration
type ObjectExpression struct {
	// Type of AST node
	Type *string `json:"type,omitempty"`
	// Object properties
	Properties *[]Property `json:"properties,omitempty"`
}

// NewObjectExpression instantiates a new ObjectExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectExpression() *ObjectExpression {
	this := ObjectExpression{}
	return &this
}

// NewObjectExpressionWithDefaults instantiates a new ObjectExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectExpressionWithDefaults() *ObjectExpression {
	this := ObjectExpression{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ObjectExpression) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectExpression) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ObjectExpression) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ObjectExpression) SetType(v string) {
	o.Type = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ObjectExpression) GetProperties() []Property {
	if o == nil || o.Properties == nil {
		var ret []Property
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectExpression) GetPropertiesOk() (*[]Property, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ObjectExpression) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []Property and assigns it to the Properties field.
func (o *ObjectExpression) SetProperties(v []Property) {
	o.Properties = &v
}

func (o ObjectExpression) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableObjectExpression struct {
	value *ObjectExpression
	isSet bool
}

func (v NullableObjectExpression) Get() *ObjectExpression {
	return v.value
}

func (v *NullableObjectExpression) Set(val *ObjectExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectExpression(val *ObjectExpression) *NullableObjectExpression {
	return &NullableObjectExpression{value: val, isSet: true}
}

func (v NullableObjectExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
