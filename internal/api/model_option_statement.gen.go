/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// OptionStatement A single variable declaration
type OptionStatement struct {
	// Type of AST node
	Type       *string                     `json:"type,omitempty"`
	Assignment *VariableOrMemberAssignment `json:"assignment,omitempty"`
}

// NewOptionStatement instantiates a new OptionStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionStatement() *OptionStatement {
	this := OptionStatement{}
	return &this
}

// NewOptionStatementWithDefaults instantiates a new OptionStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionStatementWithDefaults() *OptionStatement {
	this := OptionStatement{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OptionStatement) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionStatement) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OptionStatement) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OptionStatement) SetType(v string) {
	o.Type = &v
}

// GetAssignment returns the Assignment field value if set, zero value otherwise.
func (o *OptionStatement) GetAssignment() VariableOrMemberAssignment {
	if o == nil || o.Assignment == nil {
		var ret VariableOrMemberAssignment
		return ret
	}
	return *o.Assignment
}

// GetAssignmentOk returns a tuple with the Assignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionStatement) GetAssignmentOk() (*VariableOrMemberAssignment, bool) {
	if o == nil || o.Assignment == nil {
		return nil, false
	}
	return o.Assignment, true
}

// HasAssignment returns a boolean if a field has been set.
func (o *OptionStatement) HasAssignment() bool {
	if o != nil && o.Assignment != nil {
		return true
	}

	return false
}

// SetAssignment gets a reference to the given VariableOrMemberAssignment and assigns it to the Assignment field.
func (o *OptionStatement) SetAssignment(v VariableOrMemberAssignment) {
	o.Assignment = &v
}

func (o OptionStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Assignment != nil {
		toSerialize["assignment"] = o.Assignment
	}
	return json.Marshal(toSerialize)
}

type NullableOptionStatement struct {
	value *OptionStatement
	isSet bool
}

func (v NullableOptionStatement) Get() *OptionStatement {
	return v.value
}

func (v *NullableOptionStatement) Set(val *OptionStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionStatement(val *OptionStatement) *NullableOptionStatement {
	return &NullableOptionStatement{value: val, isSet: true}
}

func (v NullableOptionStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
