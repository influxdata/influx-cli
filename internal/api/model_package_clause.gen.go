/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PackageClause Defines a package identifier
type PackageClause struct {
	// Type of AST node
	Type *string     `json:"type,omitempty"`
	Name *Identifier `json:"name,omitempty"`
}

// NewPackageClause instantiates a new PackageClause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageClause() *PackageClause {
	this := PackageClause{}
	return &this
}

// NewPackageClauseWithDefaults instantiates a new PackageClause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageClauseWithDefaults() *PackageClause {
	this := PackageClause{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PackageClause) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageClause) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PackageClause) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PackageClause) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PackageClause) GetName() Identifier {
	if o == nil || o.Name == nil {
		var ret Identifier
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageClause) GetNameOk() (*Identifier, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PackageClause) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given Identifier and assigns it to the Name field.
func (o *PackageClause) SetName(v Identifier) {
	o.Name = &v
}

func (o PackageClause) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullablePackageClause struct {
	value *PackageClause
	isSet bool
}

func (v NullablePackageClause) Get() *PackageClause {
	return v.value
}

func (v *NullablePackageClause) Set(val *PackageClause) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageClause) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageClause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageClause(val *PackageClause) *NullablePackageClause {
	return &NullablePackageClause{value: val, isSet: true}
}

func (v NullablePackageClause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageClause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
