/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PipeExpression Call expression with pipe argument
type PipeExpression struct {
	// Type of AST node
	Type     *string         `json:"type,omitempty"`
	Argument *Expression     `json:"argument,omitempty"`
	Call     *CallExpression `json:"call,omitempty"`
}

// NewPipeExpression instantiates a new PipeExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipeExpression() *PipeExpression {
	this := PipeExpression{}
	return &this
}

// NewPipeExpressionWithDefaults instantiates a new PipeExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipeExpressionWithDefaults() *PipeExpression {
	this := PipeExpression{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PipeExpression) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipeExpression) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PipeExpression) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PipeExpression) SetType(v string) {
	o.Type = &v
}

// GetArgument returns the Argument field value if set, zero value otherwise.
func (o *PipeExpression) GetArgument() Expression {
	if o == nil || o.Argument == nil {
		var ret Expression
		return ret
	}
	return *o.Argument
}

// GetArgumentOk returns a tuple with the Argument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipeExpression) GetArgumentOk() (*Expression, bool) {
	if o == nil || o.Argument == nil {
		return nil, false
	}
	return o.Argument, true
}

// HasArgument returns a boolean if a field has been set.
func (o *PipeExpression) HasArgument() bool {
	if o != nil && o.Argument != nil {
		return true
	}

	return false
}

// SetArgument gets a reference to the given Expression and assigns it to the Argument field.
func (o *PipeExpression) SetArgument(v Expression) {
	o.Argument = &v
}

// GetCall returns the Call field value if set, zero value otherwise.
func (o *PipeExpression) GetCall() CallExpression {
	if o == nil || o.Call == nil {
		var ret CallExpression
		return ret
	}
	return *o.Call
}

// GetCallOk returns a tuple with the Call field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipeExpression) GetCallOk() (*CallExpression, bool) {
	if o == nil || o.Call == nil {
		return nil, false
	}
	return o.Call, true
}

// HasCall returns a boolean if a field has been set.
func (o *PipeExpression) HasCall() bool {
	if o != nil && o.Call != nil {
		return true
	}

	return false
}

// SetCall gets a reference to the given CallExpression and assigns it to the Call field.
func (o *PipeExpression) SetCall(v CallExpression) {
	o.Call = &v
}

func (o PipeExpression) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Argument != nil {
		toSerialize["argument"] = o.Argument
	}
	if o.Call != nil {
		toSerialize["call"] = o.Call
	}
	return json.Marshal(toSerialize)
}

type NullablePipeExpression struct {
	value *PipeExpression
	isSet bool
}

func (v NullablePipeExpression) Get() *PipeExpression {
	return v.value
}

func (v *NullablePipeExpression) Set(val *PipeExpression) {
	v.value = val
	v.isSet = true
}

func (v NullablePipeExpression) IsSet() bool {
	return v.isSet
}

func (v *NullablePipeExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipeExpression(val *PipeExpression) *NullablePipeExpression {
	return &NullablePipeExpression{value: val, isSet: true}
}

func (v NullablePipeExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipeExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
