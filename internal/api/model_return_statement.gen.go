/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ReturnStatement Defines an expression to return
type ReturnStatement struct {
	// Type of AST node
	Type     *string     `json:"type,omitempty"`
	Argument *Expression `json:"argument,omitempty"`
}

// NewReturnStatement instantiates a new ReturnStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnStatement() *ReturnStatement {
	this := ReturnStatement{}
	return &this
}

// NewReturnStatementWithDefaults instantiates a new ReturnStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnStatementWithDefaults() *ReturnStatement {
	this := ReturnStatement{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ReturnStatement) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnStatement) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ReturnStatement) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ReturnStatement) SetType(v string) {
	o.Type = &v
}

// GetArgument returns the Argument field value if set, zero value otherwise.
func (o *ReturnStatement) GetArgument() Expression {
	if o == nil || o.Argument == nil {
		var ret Expression
		return ret
	}
	return *o.Argument
}

// GetArgumentOk returns a tuple with the Argument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnStatement) GetArgumentOk() (*Expression, bool) {
	if o == nil || o.Argument == nil {
		return nil, false
	}
	return o.Argument, true
}

// HasArgument returns a boolean if a field has been set.
func (o *ReturnStatement) HasArgument() bool {
	if o != nil && o.Argument != nil {
		return true
	}

	return false
}

// SetArgument gets a reference to the given Expression and assigns it to the Argument field.
func (o *ReturnStatement) SetArgument(v Expression) {
	o.Argument = &v
}

func (o ReturnStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Argument != nil {
		toSerialize["argument"] = o.Argument
	}
	return json.Marshal(toSerialize)
}

type NullableReturnStatement struct {
	value *ReturnStatement
	isSet bool
}

func (v NullableReturnStatement) Get() *ReturnStatement {
	return v.value
}

func (v *NullableReturnStatement) Set(val *ReturnStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnStatement(val *ReturnStatement) *NullableReturnStatement {
	return &NullableReturnStatement{value: val, isSet: true}
}

func (v NullableReturnStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
