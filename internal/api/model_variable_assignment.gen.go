/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// VariableAssignment Represents the declaration of a variable
type VariableAssignment struct {
	// Type of AST node
	Type *string     `json:"type,omitempty"`
	Id   *Identifier `json:"id,omitempty"`
	Init *Expression `json:"init,omitempty"`
}

// NewVariableAssignment instantiates a new VariableAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableAssignment() *VariableAssignment {
	this := VariableAssignment{}
	return &this
}

// NewVariableAssignmentWithDefaults instantiates a new VariableAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableAssignmentWithDefaults() *VariableAssignment {
	this := VariableAssignment{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VariableAssignment) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableAssignment) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VariableAssignment) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VariableAssignment) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VariableAssignment) GetId() Identifier {
	if o == nil || o.Id == nil {
		var ret Identifier
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableAssignment) GetIdOk() (*Identifier, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VariableAssignment) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given Identifier and assigns it to the Id field.
func (o *VariableAssignment) SetId(v Identifier) {
	o.Id = &v
}

// GetInit returns the Init field value if set, zero value otherwise.
func (o *VariableAssignment) GetInit() Expression {
	if o == nil || o.Init == nil {
		var ret Expression
		return ret
	}
	return *o.Init
}

// GetInitOk returns a tuple with the Init field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableAssignment) GetInitOk() (*Expression, bool) {
	if o == nil || o.Init == nil {
		return nil, false
	}
	return o.Init, true
}

// HasInit returns a boolean if a field has been set.
func (o *VariableAssignment) HasInit() bool {
	if o != nil && o.Init != nil {
		return true
	}

	return false
}

// SetInit gets a reference to the given Expression and assigns it to the Init field.
func (o *VariableAssignment) SetInit(v Expression) {
	o.Init = &v
}

func (o VariableAssignment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Init != nil {
		toSerialize["init"] = o.Init
	}
	return json.Marshal(toSerialize)
}

type NullableVariableAssignment struct {
	value *VariableAssignment
	isSet bool
}

func (v NullableVariableAssignment) Get() *VariableAssignment {
	return v.value
}

func (v *NullableVariableAssignment) Set(val *VariableAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableAssignment(val *VariableAssignment) *NullableVariableAssignment {
	return &NullableVariableAssignment{value: val, isSet: true}
}

func (v NullableVariableAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
