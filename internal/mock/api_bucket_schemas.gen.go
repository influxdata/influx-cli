// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influx-cli/v2/api (interfaces: BucketSchemasApi)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/influxdata/influx-cli/v2/api"
)

// MockBucketSchemasApi is a mock of BucketSchemasApi interface.
type MockBucketSchemasApi struct {
	ctrl     *gomock.Controller
	recorder *MockBucketSchemasApiMockRecorder
}

// MockBucketSchemasApiMockRecorder is the mock recorder for MockBucketSchemasApi.
type MockBucketSchemasApiMockRecorder struct {
	mock *MockBucketSchemasApi
}

// NewMockBucketSchemasApi creates a new mock instance.
func NewMockBucketSchemasApi(ctrl *gomock.Controller) *MockBucketSchemasApi {
	mock := &MockBucketSchemasApi{ctrl: ctrl}
	mock.recorder = &MockBucketSchemasApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketSchemasApi) EXPECT() *MockBucketSchemasApiMockRecorder {
	return m.recorder
}

// CreateMeasurementSchema mocks base method.
func (m *MockBucketSchemasApi) CreateMeasurementSchema(arg0 context.Context, arg1 string) api.ApiCreateMeasurementSchemaRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeasurementSchema", arg0, arg1)
	ret0, _ := ret[0].(api.ApiCreateMeasurementSchemaRequest)
	return ret0
}

// CreateMeasurementSchema indicates an expected call of CreateMeasurementSchema.
func (mr *MockBucketSchemasApiMockRecorder) CreateMeasurementSchema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeasurementSchema", reflect.TypeOf((*MockBucketSchemasApi)(nil).CreateMeasurementSchema), arg0, arg1)
}

// CreateMeasurementSchemaExecute mocks base method.
func (m *MockBucketSchemasApi) CreateMeasurementSchemaExecute(arg0 api.ApiCreateMeasurementSchemaRequest) (api.MeasurementSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeasurementSchemaExecute", arg0)
	ret0, _ := ret[0].(api.MeasurementSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeasurementSchemaExecute indicates an expected call of CreateMeasurementSchemaExecute.
func (mr *MockBucketSchemasApiMockRecorder) CreateMeasurementSchemaExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeasurementSchemaExecute", reflect.TypeOf((*MockBucketSchemasApi)(nil).CreateMeasurementSchemaExecute), arg0)
}

// CreateMeasurementSchemaExecuteWithHttpInfo mocks base method.
func (m *MockBucketSchemasApi) CreateMeasurementSchemaExecuteWithHttpInfo(arg0 api.ApiCreateMeasurementSchemaRequest) (api.MeasurementSchema, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeasurementSchemaExecuteWithHttpInfo", arg0)
	ret0, _ := ret[0].(api.MeasurementSchema)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMeasurementSchemaExecuteWithHttpInfo indicates an expected call of CreateMeasurementSchemaExecuteWithHttpInfo.
func (mr *MockBucketSchemasApiMockRecorder) CreateMeasurementSchemaExecuteWithHttpInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeasurementSchemaExecuteWithHttpInfo", reflect.TypeOf((*MockBucketSchemasApi)(nil).CreateMeasurementSchemaExecuteWithHttpInfo), arg0)
}

// GetMeasurementSchema mocks base method.
func (m *MockBucketSchemasApi) GetMeasurementSchema(arg0 context.Context, arg1, arg2 string) api.ApiGetMeasurementSchemaRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementSchema", arg0, arg1, arg2)
	ret0, _ := ret[0].(api.ApiGetMeasurementSchemaRequest)
	return ret0
}

// GetMeasurementSchema indicates an expected call of GetMeasurementSchema.
func (mr *MockBucketSchemasApiMockRecorder) GetMeasurementSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementSchema", reflect.TypeOf((*MockBucketSchemasApi)(nil).GetMeasurementSchema), arg0, arg1, arg2)
}

// GetMeasurementSchemaExecute mocks base method.
func (m *MockBucketSchemasApi) GetMeasurementSchemaExecute(arg0 api.ApiGetMeasurementSchemaRequest) (api.MeasurementSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementSchemaExecute", arg0)
	ret0, _ := ret[0].(api.MeasurementSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurementSchemaExecute indicates an expected call of GetMeasurementSchemaExecute.
func (mr *MockBucketSchemasApiMockRecorder) GetMeasurementSchemaExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementSchemaExecute", reflect.TypeOf((*MockBucketSchemasApi)(nil).GetMeasurementSchemaExecute), arg0)
}

// GetMeasurementSchemaExecuteWithHttpInfo mocks base method.
func (m *MockBucketSchemasApi) GetMeasurementSchemaExecuteWithHttpInfo(arg0 api.ApiGetMeasurementSchemaRequest) (api.MeasurementSchema, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementSchemaExecuteWithHttpInfo", arg0)
	ret0, _ := ret[0].(api.MeasurementSchema)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMeasurementSchemaExecuteWithHttpInfo indicates an expected call of GetMeasurementSchemaExecuteWithHttpInfo.
func (mr *MockBucketSchemasApiMockRecorder) GetMeasurementSchemaExecuteWithHttpInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementSchemaExecuteWithHttpInfo", reflect.TypeOf((*MockBucketSchemasApi)(nil).GetMeasurementSchemaExecuteWithHttpInfo), arg0)
}

// GetMeasurementSchemas mocks base method.
func (m *MockBucketSchemasApi) GetMeasurementSchemas(arg0 context.Context, arg1 string) api.ApiGetMeasurementSchemasRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementSchemas", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetMeasurementSchemasRequest)
	return ret0
}

// GetMeasurementSchemas indicates an expected call of GetMeasurementSchemas.
func (mr *MockBucketSchemasApiMockRecorder) GetMeasurementSchemas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementSchemas", reflect.TypeOf((*MockBucketSchemasApi)(nil).GetMeasurementSchemas), arg0, arg1)
}

// GetMeasurementSchemasExecute mocks base method.
func (m *MockBucketSchemasApi) GetMeasurementSchemasExecute(arg0 api.ApiGetMeasurementSchemasRequest) (api.MeasurementSchemaList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementSchemasExecute", arg0)
	ret0, _ := ret[0].(api.MeasurementSchemaList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurementSchemasExecute indicates an expected call of GetMeasurementSchemasExecute.
func (mr *MockBucketSchemasApiMockRecorder) GetMeasurementSchemasExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementSchemasExecute", reflect.TypeOf((*MockBucketSchemasApi)(nil).GetMeasurementSchemasExecute), arg0)
}

// GetMeasurementSchemasExecuteWithHttpInfo mocks base method.
func (m *MockBucketSchemasApi) GetMeasurementSchemasExecuteWithHttpInfo(arg0 api.ApiGetMeasurementSchemasRequest) (api.MeasurementSchemaList, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementSchemasExecuteWithHttpInfo", arg0)
	ret0, _ := ret[0].(api.MeasurementSchemaList)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMeasurementSchemasExecuteWithHttpInfo indicates an expected call of GetMeasurementSchemasExecuteWithHttpInfo.
func (mr *MockBucketSchemasApiMockRecorder) GetMeasurementSchemasExecuteWithHttpInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementSchemasExecuteWithHttpInfo", reflect.TypeOf((*MockBucketSchemasApi)(nil).GetMeasurementSchemasExecuteWithHttpInfo), arg0)
}

// OnlyCloud mocks base method.
func (m *MockBucketSchemasApi) OnlyCloud() api.BucketSchemasApi {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnlyCloud")
	ret0, _ := ret[0].(api.BucketSchemasApi)
	return ret0
}

// OnlyCloud indicates an expected call of OnlyCloud.
func (mr *MockBucketSchemasApiMockRecorder) OnlyCloud() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlyCloud", reflect.TypeOf((*MockBucketSchemasApi)(nil).OnlyCloud))
}

// OnlyOSS mocks base method.
func (m *MockBucketSchemasApi) OnlyOSS() api.BucketSchemasApi {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnlyOSS")
	ret0, _ := ret[0].(api.BucketSchemasApi)
	return ret0
}

// OnlyOSS indicates an expected call of OnlyOSS.
func (mr *MockBucketSchemasApiMockRecorder) OnlyOSS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlyOSS", reflect.TypeOf((*MockBucketSchemasApi)(nil).OnlyOSS))
}

// UpdateMeasurementSchema mocks base method.
func (m *MockBucketSchemasApi) UpdateMeasurementSchema(arg0 context.Context, arg1, arg2 string) api.ApiUpdateMeasurementSchemaRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeasurementSchema", arg0, arg1, arg2)
	ret0, _ := ret[0].(api.ApiUpdateMeasurementSchemaRequest)
	return ret0
}

// UpdateMeasurementSchema indicates an expected call of UpdateMeasurementSchema.
func (mr *MockBucketSchemasApiMockRecorder) UpdateMeasurementSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeasurementSchema", reflect.TypeOf((*MockBucketSchemasApi)(nil).UpdateMeasurementSchema), arg0, arg1, arg2)
}

// UpdateMeasurementSchemaExecute mocks base method.
func (m *MockBucketSchemasApi) UpdateMeasurementSchemaExecute(arg0 api.ApiUpdateMeasurementSchemaRequest) (api.MeasurementSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeasurementSchemaExecute", arg0)
	ret0, _ := ret[0].(api.MeasurementSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeasurementSchemaExecute indicates an expected call of UpdateMeasurementSchemaExecute.
func (mr *MockBucketSchemasApiMockRecorder) UpdateMeasurementSchemaExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeasurementSchemaExecute", reflect.TypeOf((*MockBucketSchemasApi)(nil).UpdateMeasurementSchemaExecute), arg0)
}

// UpdateMeasurementSchemaExecuteWithHttpInfo mocks base method.
func (m *MockBucketSchemasApi) UpdateMeasurementSchemaExecuteWithHttpInfo(arg0 api.ApiUpdateMeasurementSchemaRequest) (api.MeasurementSchema, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeasurementSchemaExecuteWithHttpInfo", arg0)
	ret0, _ := ret[0].(api.MeasurementSchema)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateMeasurementSchemaExecuteWithHttpInfo indicates an expected call of UpdateMeasurementSchemaExecuteWithHttpInfo.
func (mr *MockBucketSchemasApiMockRecorder) UpdateMeasurementSchemaExecuteWithHttpInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeasurementSchemaExecuteWithHttpInfo", reflect.TypeOf((*MockBucketSchemasApi)(nil).UpdateMeasurementSchemaExecuteWithHttpInfo), arg0)
}
