// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influx-cli/v2/api (interfaces: DeleteApi)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/influxdata/influx-cli/v2/api"
)

// MockDeleteApi is a mock of DeleteApi interface.
type MockDeleteApi struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteApiMockRecorder
}

// MockDeleteApiMockRecorder is the mock recorder for MockDeleteApi.
type MockDeleteApiMockRecorder struct {
	mock *MockDeleteApi
}

// NewMockDeleteApi creates a new mock instance.
func NewMockDeleteApi(ctrl *gomock.Controller) *MockDeleteApi {
	mock := &MockDeleteApi{ctrl: ctrl}
	mock.recorder = &MockDeleteApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteApi) EXPECT() *MockDeleteApiMockRecorder {
	return m.recorder
}

// OnlyCloud mocks base method.
func (m *MockDeleteApi) OnlyCloud() api.DeleteApi {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnlyCloud")
	ret0, _ := ret[0].(api.DeleteApi)
	return ret0
}

// OnlyCloud indicates an expected call of OnlyCloud.
func (mr *MockDeleteApiMockRecorder) OnlyCloud() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlyCloud", reflect.TypeOf((*MockDeleteApi)(nil).OnlyCloud))
}

// OnlyOSS mocks base method.
func (m *MockDeleteApi) OnlyOSS() api.DeleteApi {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnlyOSS")
	ret0, _ := ret[0].(api.DeleteApi)
	return ret0
}

// OnlyOSS indicates an expected call of OnlyOSS.
func (mr *MockDeleteApiMockRecorder) OnlyOSS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlyOSS", reflect.TypeOf((*MockDeleteApi)(nil).OnlyOSS))
}

// PostDelete mocks base method.
func (m *MockDeleteApi) PostDelete(arg0 context.Context) api.ApiPostDeleteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostDelete", arg0)
	ret0, _ := ret[0].(api.ApiPostDeleteRequest)
	return ret0
}

// PostDelete indicates an expected call of PostDelete.
func (mr *MockDeleteApiMockRecorder) PostDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostDelete", reflect.TypeOf((*MockDeleteApi)(nil).PostDelete), arg0)
}

// PostDeleteExecute mocks base method.
func (m *MockDeleteApi) PostDeleteExecute(arg0 api.ApiPostDeleteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostDeleteExecute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostDeleteExecute indicates an expected call of PostDeleteExecute.
func (mr *MockDeleteApiMockRecorder) PostDeleteExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostDeleteExecute", reflect.TypeOf((*MockDeleteApi)(nil).PostDeleteExecute), arg0)
}
