// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influx-cli/v2/api (interfaces: InvokableScriptsApi)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/influxdata/influx-cli/v2/api"
)

// MockInvokableScriptsApi is a mock of InvokableScriptsApi interface.
type MockInvokableScriptsApi struct {
	ctrl     *gomock.Controller
	recorder *MockInvokableScriptsApiMockRecorder
}

// MockInvokableScriptsApiMockRecorder is the mock recorder for MockInvokableScriptsApi.
type MockInvokableScriptsApiMockRecorder struct {
	mock *MockInvokableScriptsApi
}

// NewMockInvokableScriptsApi creates a new mock instance.
func NewMockInvokableScriptsApi(ctrl *gomock.Controller) *MockInvokableScriptsApi {
	mock := &MockInvokableScriptsApi{ctrl: ctrl}
	mock.recorder = &MockInvokableScriptsApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvokableScriptsApi) EXPECT() *MockInvokableScriptsApiMockRecorder {
	return m.recorder
}

// DeleteScriptsID mocks base method.
func (m *MockInvokableScriptsApi) DeleteScriptsID(arg0 context.Context, arg1 string) api.ApiDeleteScriptsIDRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScriptsID", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeleteScriptsIDRequest)
	return ret0
}

// DeleteScriptsID indicates an expected call of DeleteScriptsID.
func (mr *MockInvokableScriptsApiMockRecorder) DeleteScriptsID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScriptsID", reflect.TypeOf((*MockInvokableScriptsApi)(nil).DeleteScriptsID), arg0, arg1)
}

// DeleteScriptsIDExecute mocks base method.
func (m *MockInvokableScriptsApi) DeleteScriptsIDExecute(arg0 api.ApiDeleteScriptsIDRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScriptsIDExecute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScriptsIDExecute indicates an expected call of DeleteScriptsIDExecute.
func (mr *MockInvokableScriptsApiMockRecorder) DeleteScriptsIDExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScriptsIDExecute", reflect.TypeOf((*MockInvokableScriptsApi)(nil).DeleteScriptsIDExecute), arg0)
}

// DeleteScriptsIDExecuteWithHttpInfo mocks base method.
func (m *MockInvokableScriptsApi) DeleteScriptsIDExecuteWithHttpInfo(arg0 api.ApiDeleteScriptsIDRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScriptsIDExecuteWithHttpInfo", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteScriptsIDExecuteWithHttpInfo indicates an expected call of DeleteScriptsIDExecuteWithHttpInfo.
func (mr *MockInvokableScriptsApiMockRecorder) DeleteScriptsIDExecuteWithHttpInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScriptsIDExecuteWithHttpInfo", reflect.TypeOf((*MockInvokableScriptsApi)(nil).DeleteScriptsIDExecuteWithHttpInfo), arg0)
}

// GetScripts mocks base method.
func (m *MockInvokableScriptsApi) GetScripts(arg0 context.Context) api.ApiGetScriptsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScripts", arg0)
	ret0, _ := ret[0].(api.ApiGetScriptsRequest)
	return ret0
}

// GetScripts indicates an expected call of GetScripts.
func (mr *MockInvokableScriptsApiMockRecorder) GetScripts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScripts", reflect.TypeOf((*MockInvokableScriptsApi)(nil).GetScripts), arg0)
}

// GetScriptsExecute mocks base method.
func (m *MockInvokableScriptsApi) GetScriptsExecute(arg0 api.ApiGetScriptsRequest) (api.Scripts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScriptsExecute", arg0)
	ret0, _ := ret[0].(api.Scripts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScriptsExecute indicates an expected call of GetScriptsExecute.
func (mr *MockInvokableScriptsApiMockRecorder) GetScriptsExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScriptsExecute", reflect.TypeOf((*MockInvokableScriptsApi)(nil).GetScriptsExecute), arg0)
}

// GetScriptsExecuteWithHttpInfo mocks base method.
func (m *MockInvokableScriptsApi) GetScriptsExecuteWithHttpInfo(arg0 api.ApiGetScriptsRequest) (api.Scripts, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScriptsExecuteWithHttpInfo", arg0)
	ret0, _ := ret[0].(api.Scripts)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetScriptsExecuteWithHttpInfo indicates an expected call of GetScriptsExecuteWithHttpInfo.
func (mr *MockInvokableScriptsApiMockRecorder) GetScriptsExecuteWithHttpInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScriptsExecuteWithHttpInfo", reflect.TypeOf((*MockInvokableScriptsApi)(nil).GetScriptsExecuteWithHttpInfo), arg0)
}

// GetScriptsID mocks base method.
func (m *MockInvokableScriptsApi) GetScriptsID(arg0 context.Context, arg1 string) api.ApiGetScriptsIDRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScriptsID", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetScriptsIDRequest)
	return ret0
}

// GetScriptsID indicates an expected call of GetScriptsID.
func (mr *MockInvokableScriptsApiMockRecorder) GetScriptsID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScriptsID", reflect.TypeOf((*MockInvokableScriptsApi)(nil).GetScriptsID), arg0, arg1)
}

// GetScriptsIDExecute mocks base method.
func (m *MockInvokableScriptsApi) GetScriptsIDExecute(arg0 api.ApiGetScriptsIDRequest) (api.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScriptsIDExecute", arg0)
	ret0, _ := ret[0].(api.Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScriptsIDExecute indicates an expected call of GetScriptsIDExecute.
func (mr *MockInvokableScriptsApiMockRecorder) GetScriptsIDExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScriptsIDExecute", reflect.TypeOf((*MockInvokableScriptsApi)(nil).GetScriptsIDExecute), arg0)
}

// GetScriptsIDExecuteWithHttpInfo mocks base method.
func (m *MockInvokableScriptsApi) GetScriptsIDExecuteWithHttpInfo(arg0 api.ApiGetScriptsIDRequest) (api.Script, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScriptsIDExecuteWithHttpInfo", arg0)
	ret0, _ := ret[0].(api.Script)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetScriptsIDExecuteWithHttpInfo indicates an expected call of GetScriptsIDExecuteWithHttpInfo.
func (mr *MockInvokableScriptsApiMockRecorder) GetScriptsIDExecuteWithHttpInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScriptsIDExecuteWithHttpInfo", reflect.TypeOf((*MockInvokableScriptsApi)(nil).GetScriptsIDExecuteWithHttpInfo), arg0)
}

// PatchScriptsID mocks base method.
func (m *MockInvokableScriptsApi) PatchScriptsID(arg0 context.Context, arg1 string) api.ApiPatchScriptsIDRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchScriptsID", arg0, arg1)
	ret0, _ := ret[0].(api.ApiPatchScriptsIDRequest)
	return ret0
}

// PatchScriptsID indicates an expected call of PatchScriptsID.
func (mr *MockInvokableScriptsApiMockRecorder) PatchScriptsID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchScriptsID", reflect.TypeOf((*MockInvokableScriptsApi)(nil).PatchScriptsID), arg0, arg1)
}

// PatchScriptsIDExecute mocks base method.
func (m *MockInvokableScriptsApi) PatchScriptsIDExecute(arg0 api.ApiPatchScriptsIDRequest) (api.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchScriptsIDExecute", arg0)
	ret0, _ := ret[0].(api.Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchScriptsIDExecute indicates an expected call of PatchScriptsIDExecute.
func (mr *MockInvokableScriptsApiMockRecorder) PatchScriptsIDExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchScriptsIDExecute", reflect.TypeOf((*MockInvokableScriptsApi)(nil).PatchScriptsIDExecute), arg0)
}

// PatchScriptsIDExecuteWithHttpInfo mocks base method.
func (m *MockInvokableScriptsApi) PatchScriptsIDExecuteWithHttpInfo(arg0 api.ApiPatchScriptsIDRequest) (api.Script, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchScriptsIDExecuteWithHttpInfo", arg0)
	ret0, _ := ret[0].(api.Script)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PatchScriptsIDExecuteWithHttpInfo indicates an expected call of PatchScriptsIDExecuteWithHttpInfo.
func (mr *MockInvokableScriptsApiMockRecorder) PatchScriptsIDExecuteWithHttpInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchScriptsIDExecuteWithHttpInfo", reflect.TypeOf((*MockInvokableScriptsApi)(nil).PatchScriptsIDExecuteWithHttpInfo), arg0)
}

// PostScripts mocks base method.
func (m *MockInvokableScriptsApi) PostScripts(arg0 context.Context) api.ApiPostScriptsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostScripts", arg0)
	ret0, _ := ret[0].(api.ApiPostScriptsRequest)
	return ret0
}

// PostScripts indicates an expected call of PostScripts.
func (mr *MockInvokableScriptsApiMockRecorder) PostScripts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostScripts", reflect.TypeOf((*MockInvokableScriptsApi)(nil).PostScripts), arg0)
}

// PostScriptsExecute mocks base method.
func (m *MockInvokableScriptsApi) PostScriptsExecute(arg0 api.ApiPostScriptsRequest) (api.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostScriptsExecute", arg0)
	ret0, _ := ret[0].(api.Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostScriptsExecute indicates an expected call of PostScriptsExecute.
func (mr *MockInvokableScriptsApiMockRecorder) PostScriptsExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostScriptsExecute", reflect.TypeOf((*MockInvokableScriptsApi)(nil).PostScriptsExecute), arg0)
}

// PostScriptsExecuteWithHttpInfo mocks base method.
func (m *MockInvokableScriptsApi) PostScriptsExecuteWithHttpInfo(arg0 api.ApiPostScriptsRequest) (api.Script, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostScriptsExecuteWithHttpInfo", arg0)
	ret0, _ := ret[0].(api.Script)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostScriptsExecuteWithHttpInfo indicates an expected call of PostScriptsExecuteWithHttpInfo.
func (mr *MockInvokableScriptsApiMockRecorder) PostScriptsExecuteWithHttpInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostScriptsExecuteWithHttpInfo", reflect.TypeOf((*MockInvokableScriptsApi)(nil).PostScriptsExecuteWithHttpInfo), arg0)
}

// PostScriptsIDInvoke mocks base method.
func (m *MockInvokableScriptsApi) PostScriptsIDInvoke(arg0 context.Context, arg1 string) api.ApiPostScriptsIDInvokeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostScriptsIDInvoke", arg0, arg1)
	ret0, _ := ret[0].(api.ApiPostScriptsIDInvokeRequest)
	return ret0
}

// PostScriptsIDInvoke indicates an expected call of PostScriptsIDInvoke.
func (mr *MockInvokableScriptsApiMockRecorder) PostScriptsIDInvoke(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostScriptsIDInvoke", reflect.TypeOf((*MockInvokableScriptsApi)(nil).PostScriptsIDInvoke), arg0, arg1)
}

// PostScriptsIDInvokeExecute mocks base method.
func (m *MockInvokableScriptsApi) PostScriptsIDInvokeExecute(arg0 api.ApiPostScriptsIDInvokeRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostScriptsIDInvokeExecute", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostScriptsIDInvokeExecute indicates an expected call of PostScriptsIDInvokeExecute.
func (mr *MockInvokableScriptsApiMockRecorder) PostScriptsIDInvokeExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostScriptsIDInvokeExecute", reflect.TypeOf((*MockInvokableScriptsApi)(nil).PostScriptsIDInvokeExecute), arg0)
}

// PostScriptsIDInvokeExecuteWithHttpInfo mocks base method.
func (m *MockInvokableScriptsApi) PostScriptsIDInvokeExecuteWithHttpInfo(arg0 api.ApiPostScriptsIDInvokeRequest) (*http.Response, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostScriptsIDInvokeExecuteWithHttpInfo", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostScriptsIDInvokeExecuteWithHttpInfo indicates an expected call of PostScriptsIDInvokeExecuteWithHttpInfo.
func (mr *MockInvokableScriptsApiMockRecorder) PostScriptsIDInvokeExecuteWithHttpInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostScriptsIDInvokeExecuteWithHttpInfo", reflect.TypeOf((*MockInvokableScriptsApi)(nil).PostScriptsIDInvokeExecuteWithHttpInfo), arg0)
}
