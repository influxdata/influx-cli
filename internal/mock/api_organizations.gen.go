// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influx-cli/v2/internal/api (interfaces: OrganizationsApi)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/influxdata/influx-cli/v2/internal/api"
)

// MockOrganizationsApi is a mock of OrganizationsApi interface.
type MockOrganizationsApi struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsApiMockRecorder
}

// MockOrganizationsApiMockRecorder is the mock recorder for MockOrganizationsApi.
type MockOrganizationsApiMockRecorder struct {
	mock *MockOrganizationsApi
}

// NewMockOrganizationsApi creates a new mock instance.
func NewMockOrganizationsApi(ctrl *gomock.Controller) *MockOrganizationsApi {
	mock := &MockOrganizationsApi{ctrl: ctrl}
	mock.recorder = &MockOrganizationsApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsApi) EXPECT() *MockOrganizationsApiMockRecorder {
	return m.recorder
}

// GetOrgs mocks base method.
func (m *MockOrganizationsApi) GetOrgs(arg0 context.Context) api.ApiGetOrgsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgs", arg0)
	ret0, _ := ret[0].(api.ApiGetOrgsRequest)
	return ret0
}

// GetOrgs indicates an expected call of GetOrgs.
func (mr *MockOrganizationsApiMockRecorder) GetOrgs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgs", reflect.TypeOf((*MockOrganizationsApi)(nil).GetOrgs), arg0)
}

// GetOrgsExecute mocks base method.
func (m *MockOrganizationsApi) GetOrgsExecute(arg0 api.ApiGetOrgsRequest) (api.Organizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgsExecute", arg0)
	ret0, _ := ret[0].(api.Organizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgsExecute indicates an expected call of GetOrgsExecute.
func (mr *MockOrganizationsApiMockRecorder) GetOrgsExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgsExecute", reflect.TypeOf((*MockOrganizationsApi)(nil).GetOrgsExecute), arg0)
}

// PostOrgs mocks base method.
func (m *MockOrganizationsApi) PostOrgs(arg0 context.Context) api.ApiPostOrgsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostOrgs", arg0)
	ret0, _ := ret[0].(api.ApiPostOrgsRequest)
	return ret0
}

// PostOrgs indicates an expected call of PostOrgs.
func (mr *MockOrganizationsApiMockRecorder) PostOrgs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostOrgs", reflect.TypeOf((*MockOrganizationsApi)(nil).PostOrgs), arg0)
}

// PostOrgsExecute mocks base method.
func (m *MockOrganizationsApi) PostOrgsExecute(arg0 api.ApiPostOrgsRequest) (api.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostOrgsExecute", arg0)
	ret0, _ := ret[0].(api.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostOrgsExecute indicates an expected call of PostOrgsExecute.
func (mr *MockOrganizationsApiMockRecorder) PostOrgsExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostOrgsExecute", reflect.TypeOf((*MockOrganizationsApi)(nil).PostOrgsExecute), arg0)
}
