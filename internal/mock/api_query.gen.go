// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influx-cli/v2/api (interfaces: QueryApi)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/influxdata/influx-cli/v2/api"
)

// MockQueryApi is a mock of QueryApi interface.
type MockQueryApi struct {
	ctrl     *gomock.Controller
	recorder *MockQueryApiMockRecorder
}

// MockQueryApiMockRecorder is the mock recorder for MockQueryApi.
type MockQueryApiMockRecorder struct {
	mock *MockQueryApi
}

// NewMockQueryApi creates a new mock instance.
func NewMockQueryApi(ctrl *gomock.Controller) *MockQueryApi {
	mock := &MockQueryApi{ctrl: ctrl}
	mock.recorder = &MockQueryApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryApi) EXPECT() *MockQueryApiMockRecorder {
	return m.recorder
}

// PostQuery mocks base method.
func (m *MockQueryApi) PostQuery(arg0 context.Context) api.ApiPostQueryRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostQuery", arg0)
	ret0, _ := ret[0].(api.ApiPostQueryRequest)
	return ret0
}

// PostQuery indicates an expected call of PostQuery.
func (mr *MockQueryApiMockRecorder) PostQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostQuery", reflect.TypeOf((*MockQueryApi)(nil).PostQuery), arg0)
}

// PostQueryExecute mocks base method.
func (m *MockQueryApi) PostQueryExecute(arg0 api.ApiPostQueryRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostQueryExecute", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostQueryExecute indicates an expected call of PostQueryExecute.
func (mr *MockQueryApiMockRecorder) PostQueryExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostQueryExecute", reflect.TypeOf((*MockQueryApi)(nil).PostQueryExecute), arg0)
}

// PostQueryExecuteWithHttpInfo mocks base method.
func (m *MockQueryApi) PostQueryExecuteWithHttpInfo(arg0 api.ApiPostQueryRequest) (*http.Response, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostQueryExecuteWithHttpInfo", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostQueryExecuteWithHttpInfo indicates an expected call of PostQueryExecuteWithHttpInfo.
func (mr *MockQueryApiMockRecorder) PostQueryExecuteWithHttpInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostQueryExecuteWithHttpInfo", reflect.TypeOf((*MockQueryApi)(nil).PostQueryExecuteWithHttpInfo), arg0)
}
