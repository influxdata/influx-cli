// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influx-cli/v2/pkg/stdio (interfaces: StdIO)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStdIO is a mock of StdIO interface.
type MockStdIO struct {
	ctrl     *gomock.Controller
	recorder *MockStdIOMockRecorder
}

// MockStdIOMockRecorder is the mock recorder for MockStdIO.
type MockStdIOMockRecorder struct {
	mock *MockStdIO
}

// NewMockStdIO creates a new mock instance.
func NewMockStdIO(ctrl *gomock.Controller) *MockStdIO {
	mock := &MockStdIO{ctrl: ctrl}
	mock.recorder = &MockStdIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStdIO) EXPECT() *MockStdIOMockRecorder {
	return m.recorder
}

// Banner mocks base method.
func (m *MockStdIO) Banner(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Banner", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Banner indicates an expected call of Banner.
func (mr *MockStdIOMockRecorder) Banner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Banner", reflect.TypeOf((*MockStdIO)(nil).Banner), arg0)
}

// Error mocks base method.
func (m *MockStdIO) Error(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockStdIOMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockStdIO)(nil).Error), arg0)
}

// GetConfirm mocks base method.
func (m *MockStdIO) GetConfirm(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfirm", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetConfirm indicates an expected call of GetConfirm.
func (mr *MockStdIOMockRecorder) GetConfirm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfirm", reflect.TypeOf((*MockStdIO)(nil).GetConfirm), arg0)
}

// GetSecret mocks base method.
func (m *MockStdIO) GetSecret(arg0 string, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockStdIOMockRecorder) GetSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockStdIO)(nil).GetSecret), arg0, arg1)
}

// GetStringInput mocks base method.
func (m *MockStdIO) GetStringInput(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringInput", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStringInput indicates an expected call of GetStringInput.
func (mr *MockStdIOMockRecorder) GetStringInput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringInput", reflect.TypeOf((*MockStdIO)(nil).GetStringInput), arg0, arg1)
}

// Write mocks base method.
func (m *MockStdIO) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockStdIOMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStdIO)(nil).Write), arg0)
}

// WriteErr mocks base method.
func (m *MockStdIO) WriteErr(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteErr", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteErr indicates an expected call of WriteErr.
func (mr *MockStdIOMockRecorder) WriteErr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteErr", reflect.TypeOf((*MockStdIO)(nil).WriteErr), arg0)
}
